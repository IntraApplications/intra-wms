This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-16T06:45:41.717Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  _common/
    components/
      workspace/
        steps/
          BranchSelection.tsx
          Configuration.tsx
          EnvironmentSetup.tsx
          EnvironmentSetup2.tsx
          RepositorySelection.tsx
          ReviewSetup.tsx
          VCSSelection.tsx
        WorkspaceCreationModal.tsx
      Button.tsx
      Input.tsx
      Modal.tsx
      Notification.tsx
      OauthButton.tsx
      ProgressDots.tsx
      Spinner.tsx
      ToolTip.tsx
  _models/
    User.ts
  (auth)/
    login/
      error.tsx
      page.tsx
    signup/
      page.tsx
    actions.ts
    layout.tsx
  (dashboard)/
    dashboard/
      workspaces/
        page.tsx
        workspaces.md
      layout.tsx
  (setup)/
    setup/
      actions.ts
      page.tsx
      SetupProcess.tsx
  api/
    claude-analyze/
      analyzer.ts
      prompt.ts
      route.ts
      route3.ts
      TEST.MD
      test.ts
    clone-repository/
      route.ts
    create-workspace/
      route.ts
    github-app-install/
      route.ts
    github-callback/
      route.ts
    github-repositories/
      route.ts
    process-repository/
      route.ts
  auth/
    callback/
      route.ts
    confirm/
      route.ts
  contexts/
    NotificationContext.tsx
    WebSocketContext.tsx
  hooks/
    useAuth.tsx
    useClaudeAnalysis.tsx
    useData.tsx
    useGitHubIntegration.tsx
    useVCSToken.tsx
  lib/
    supabase/
      supabase-client.ts
      supabase-server.ts
      superbase-middleware.ts
    fontAwesome.ts
    github.ts
    sequelize.ts
  global-error.tsx
  globals.css
  layout.tsx
  page.tsx
  providers.tsx
public/
  next.svg
  vercel.svg
.eslintrc.json
.gitignore
Dockerfile
GitHub.md
GUIDE.md
middleware.ts
next.config.mjs
package.json
postcss.config.js
README.md
tailwind.config.ts
test.html
test.readme
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/_common/components/workspace/steps/BranchSelection.tsx
================
import React, { useState, useEffect } from "react";
import Button from "@/_common/components/Button";

interface BranchSelectionProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
}

const BranchSelection: React.FC<BranchSelectionProps> = ({
  workspaceData,
  updateWorkspaceData,
}) => {
  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState("");

  useEffect(() => {
    // Fetch branches based on the selected repository
    // This is a mock function, replace with actual API call
    const fetchBranches = async () => {
      const mockBranches = [
        "main",
        "develop",
        "feature/new-ui",
        "bugfix/login-issue",
      ];
      setBranches(mockBranches);
    };

    fetchBranches();
  }, [workspaceData.repositoryId]);

  const handleSelectBranch = (branch: string) => {
    setSelectedBranch(branch);
    updateWorkspaceData({ branch });
  };

  return (
    <div>
      <h3 className="text-white text-xl mb-4">Select a Branch</h3>
      <div className="space-y-2">
        {branches.map((branch) => (
          <div
            key={branch}
            className="flex justify-between items-center bg-[#2A2A2A] p-3 rounded-lg"
          >
            <span className="text-white">{branch}</span>
            <Button
              text="Select"
              size="xs"
              type="button"
              handleClick={() => handleSelectBranch(branch)}
              className={selectedBranch === branch ? "bg-green-600" : ""}
            />
          </div>
        ))}
      </div>
    </div>
  );
};

export default BranchSelection;

================
File: app/_common/components/workspace/steps/Configuration.tsx
================
// Configuration.tsx
import React, { useState, useEffect } from "react";
import Input from "@/_common/components/Input"; // Adjust the import path as needed
import Button from "@/_common/components/Button";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faCogs,
  faPlusCircle,
  faTrash,
} from "@fortawesome/free-solid-svg-icons";
import { motion, AnimatePresence } from "framer-motion";

interface ConfigurationProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
}

interface EnvVariable {
  key: string;
  value: string;
}

const Configuration: React.FC<ConfigurationProps> = ({
  workspaceData,
  updateWorkspaceData,
}) => {
  const [envVariables, setEnvVariables] = useState<EnvVariable[]>([]);
  const [ports, setPorts] = useState<number[]>([]);
  const [languageVersion, setLanguageVersion] = useState<string>("");

  useEffect(() => {
    // Initialize state with analysis data
    if (workspaceData.environmentAnalysis) {
      const analysis = workspaceData.environmentAnalysis;
      setLanguageVersion(analysis.languageVersion || "");

      // Environment Variables
      if (analysis.environmentVariables) {
        const initialEnvVars = analysis.environmentVariables.map(
          (variable: string) => ({
            key: variable,
            value: "",
          })
        );
        setEnvVariables(initialEnvVars);
      }

      // Ports
      if (analysis.ports) {
        setPorts(analysis.ports);
      }
    }
  }, [workspaceData.environmentAnalysis]);

  const handleEnvVarChange = (index: number, field: string, value: string) => {
    const updatedEnvVars = [...envVariables];
    updatedEnvVars[index][field as keyof EnvVariable] = value;
    setEnvVariables(updatedEnvVars);
    updateWorkspaceData({ envVariables: updatedEnvVars });
  };

  const addEnvVar = () => {
    setEnvVariables([...envVariables, { key: "", value: "" }]);
  };

  const removeEnvVar = (index: number) => {
    const updatedEnvVars = envVariables.filter((_, i) => i !== index);
    setEnvVariables(updatedEnvVars);
    updateWorkspaceData({ envVariables: updatedEnvVars });
  };

  return (
    <div className="p-6 max-w-[1320px] mx-auto">
      <div className="mb-6">
        <h1 className="text-[16px] font-semibold text-white mb-4 flex items-center">
          <FontAwesomeIcon icon={faCogs} className="text-blue-500 mr-2" />
          Configuration
        </h1>
        <p className="text-gray-400 text-[13px]">
          Customize your workspace settings below. Review and adjust environment
          variables, ports, and other configurations.
        </p>
      </div>

      <div className="mb-6">
        {/* Language Version */}
        <div className="mb-6">
          <Input
            label="Language Version"
            value={languageVersion}
            onChange={(e) => {
              setLanguageVersion(e.target.value);
              updateWorkspaceData({ languageVersion: e.target.value });
            }}
            error={undefined}
          />
        </div>

        {/* Environment Variables */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <label className="text-white text-[13px] font-medium">
              Environment Variables
            </label>
            <button
              onClick={addEnvVar}
              className="text-blue-500 hover:text-blue-400 focus:outline-none text-[13px]"
            >
              <FontAwesomeIcon icon={faPlusCircle} className="mr-1" />
              Add Variable
            </button>
          </div>
          <AnimatePresence>
            {envVariables.map((envVar, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
                className="flex items-center mb-4"
              >
                <div className="flex-1 mr-2">
                  <Input
                    label="Key"
                    value={envVar.key}
                    onChange={(e) =>
                      handleEnvVarChange(index, "key", e.target.value)
                    }
                    error={undefined}
                  />
                </div>
                <div className="flex-1 mr-2">
                  <Input
                    label="Value"
                    value={envVar.value}
                    onChange={(e) =>
                      handleEnvVarChange(index, "value", e.target.value)
                    }
                    error={undefined}
                  />
                </div>
                <button
                  onClick={() => removeEnvVar(index)}
                  className="text-red-500 hover:text-red-400 focus:outline-none mt-6"
                >
                  <FontAwesomeIcon icon={faTrash} />
                </button>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>

        {/* Ports */}
        <div className="mb-6">
          <Input
            label="Port"
            type="number"
            value={ports[0] || ""}
            onChange={(e) => {
              const portNumber = parseInt(e.target.value, 10);
              setPorts([portNumber]);
              updateWorkspaceData({ ports: [portNumber] });
            }}
            error={undefined}
          />
        </div>
      </div>

      {/* Notes */}
      {workspaceData.environmentAnalysis?.notes && (
        <div className="bg-dashboard border border-border rounded-[5px] p-4 mb-6">
          <h2 className="text-white text-[14px] font-semibold mb-2">Notes</h2>
          <p className="text-gray-400 text-[13px]">
            {workspaceData.environmentAnalysis.notes}
          </p>
        </div>
      )}
    </div>
  );
};

export default Configuration;

================
File: app/_common/components/workspace/steps/EnvironmentSetup.tsx
================
import React, { useEffect, useState, useRef } from "react";
import { useClaudeAnalysis } from "@/hooks/useClaudeAnalysis";
import { useNotificationContext } from "@/contexts/NotificationContext";
import Button from "@/_common/components/Button";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faCheckCircle,
  faCircleNotch,
  faTimesCircle,
} from "@fortawesome/free-solid-svg-icons";

interface EnvironmentSetupProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
  onComplete: (success: boolean) => void;
}

interface StepError {
  stepKey: string;
  message: string;
}

const steps = [
  { name: "Cloning Repository", key: "cloning" },
  { name: "Processing Repository", key: "processing" },
  { name: "Analyzing Repository", key: "analyzing" },
];

const EnvironmentSetup: React.FC<EnvironmentSetupProps> = ({
  workspaceData,
  updateWorkspaceData,
  onComplete,
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState<string[]>([]);
  const [failedStep, setFailedStep] = useState<StepError | null>(null);
  const [analysisResult, setAnalysisResult] = useState<any | null>(null);
  const { analyzeRepository } = useClaudeAnalysis();
  const { showNotification } = useNotificationContext();

  const [stepDurations, setStepDurations] = useState<{ [key: string]: number }>(
    {}
  );
  const [stepTimers, setStepTimers] = useState<{
    [key: string]: NodeJS.Timeout;
  }>({});
  const [overallStartTime, setOverallStartTime] = useState<number | null>(null);
  const [overallElapsedTime, setOverallElapsedTime] = useState<number>(0);

  const hasStartedProcess = useRef(false);

  useEffect(() => {
    if (workspaceData.repository && !hasStartedProcess.current) {
      hasStartedProcess.current = true;
      startProcess();
    }
  }, [workspaceData.repository]);

  useEffect(() => {
    let overallTimer: NodeJS.Timeout | null = null;
    if (overallStartTime !== null) {
      overallTimer = setInterval(() => {
        setOverallElapsedTime((Date.now() - overallStartTime) / 1000);
      }, 1000);
    }
    return () => {
      if (overallTimer) {
        clearInterval(overallTimer);
      }
    };
  }, [overallStartTime]);

  const startProcess = async () => {
    setCurrentStep(0);
    setCompletedSteps([]);
    setFailedStep(null);
    setAnalysisResult(null);
    setStepDurations({});
    setOverallElapsedTime(0);
    setOverallStartTime(Date.now());

    try {
      // Step 1: Clone the repository
      const repoDir = await executeStep(steps[0], cloneRepository);

      // Step 2: Process the repository
      const processData = await executeStep(steps[1], () =>
        processRepository(repoDir)
      );

      // Step 3: Analyze the repository
      await executeStep(steps[2], () =>
        analyzeRepo(processData.repoDir, processData.outputFilePath)
      );

      showNotification({
        type: "success",
        title: "Environment Setup Complete",
        message: "Workspace environment is ready.",
      });

      // Notify parent component that setup is complete
      onComplete(true);
    } catch (error) {
      // Notify parent component that setup failed
      onComplete(false);
    }
  };

  const executeStep = async (
    step: { name: string; key: string },
    stepFunction: () => Promise<any>
  ) => {
    setCurrentStep(steps.findIndex((s) => s.key === step.key));

    // Initialize step duration and start timer
    setStepDurations((prev) => ({ ...prev, [step.key]: 0 }));
    const stepStartTime = Date.now();

    const timer = setInterval(() => {
      setStepDurations((prev) => ({
        ...prev,
        [step.key]: (Date.now() - stepStartTime) / 1000,
      }));
    }, 1000);

    setStepTimers((prev) => ({ ...prev, [step.key]: timer }));

    try {
      const result = await stepFunction();
      setCompletedSteps((prev) => [...prev, step.key]);

      // Clear timer and record final duration
      clearInterval(timer);
      setStepDurations((prev) => ({
        ...prev,
        [step.key]: (Date.now() - stepStartTime) / 1000,
      }));
      return result;
    } catch (error) {
      // Clear timer and record final duration
      clearInterval(timer);
      setStepDurations((prev) => ({
        ...prev,
        [step.key]: (Date.now() - stepStartTime) / 1000,
      }));
      throw error;
    }
  };

  const cloneRepository = async () => {
    try {
      const response = await axios.post("/api/clone-repository", {
        repoFullName: workspaceData.repository,
      });
      // Store repoDir for subsequent steps
      const repoDir = response.data.repoDir;
      updateWorkspaceData({ repoDir });
      return repoDir; // Return repoDir for the next step
    } catch (error) {
      setFailedStep({
        stepKey: steps[0].key,
        message: error.response?.data?.error || "Failed to clone repository.",
      });
      showNotification({
        type: "error",
        title: "Cloning Failed",
        message:
          error.response?.data?.error || "An error occurred while cloning.",
      });
      onComplete(false);
      throw error;
    }
  };

  const processRepository = async (repoDir: string) => {
    try {
      const response = await axios.post("/api/process-repository", {
        repoDir, // Use the repoDir passed as a parameter
      });
      return {
        repoDir: response.data.repoDir,
        outputFilePath: response.data.outputFilePath,
      };
    } catch (error) {
      setFailedStep({
        stepKey: steps[1].key,
        message: error.response?.data?.error || "Failed to process repository.",
      });
      showNotification({
        type: "error",
        title: "Processing Failed",
        message:
          error.response?.data?.error || "An error occurred during processing.",
      });
      onComplete(false);
      throw error;
    }
  };

  const analyzeRepo = async (repoDir: string, outputFilePath: string) => {
    try {
      const analysisData = await analyzeRepository(repoDir, outputFilePath);
      setAnalysisResult(analysisData);
      updateWorkspaceData({
        environmentAnalysis: analysisData,
      });
    } catch (error) {
      setFailedStep({
        stepKey: steps[2].key,
        message: error.response?.data?.error || "Failed to analyze repository.",
      });
      showNotification({
        type: "error",
        title: "Analysis Failed",
        message:
          error.response?.data?.error || "An error occurred during analysis.",
      });
      onComplete(false);
      throw error;
    }
  };

  const renderStepIcon = (stepKey: string, index: number) => {
    if (failedStep?.stepKey === stepKey) {
      return (
        <FontAwesomeIcon
          icon={faTimesCircle}
          className={`${iconSizeClass} text-red-500`}
        />
      );
    } else if (completedSteps.includes(stepKey)) {
      return (
        <FontAwesomeIcon
          icon={faCheckCircle}
          className={`${iconSizeClass} text-green-500 animate-checkmark`}
        />
      );
    } else if (currentStep === index && !failedStep) {
      return (
        <FontAwesomeIcon
          icon={faCircleNotch}
          className={`${iconSizeClass} text-blue-500 animate-spin`}
        />
      );
    } else {
      return (
        <div
          className={`${iconSizeClass} h-5 w-5 border border-gray-500 rounded-full`}
        />
      );
    }
  };

  const iconSizeClass = "text-xl"; // Adjusted icon size for consistency

  return (
    <div className="p-6 max-w-[1320px] mx-auto">
      <div className="mb-6">
        <h1 className="text-lg font-semibold text-white mb-4">
          Environment Setup
        </h1>
        <p className="text-gray-400 text-[13px]">
          Setting up your workspace environment. Please wait while we complete
          the steps below.
        </p>
        {overallStartTime !== null && (
          <p className="text-gray-400 text-sm mt-2">
            Total Elapsed Time: {overallElapsedTime.toFixed(0)} seconds
          </p>
        )}
      </div>

      <div className="mb-6">
        {steps.map((step, index) => (
          <div key={step.key} className="flex items-center mb-4">
            {renderStepIcon(step.key, index)}
            <div className="ml-4 flex flex-col">
              <span className="text-white text-sm">{step.name}</span>
              {stepDurations[step.key] !== undefined && (
                <span className="text-gray-400 text-xs">
                  Duration: {stepDurations[step.key].toFixed(0)} seconds
                </span>
              )}
            </div>
          </div>
        ))}
      </div>

      {failedStep && (
        <div className="mb-6">
          <p className="text-red-500 text-sm">
            Error in {steps.find((s) => s.key === failedStep.stepKey)?.name}:{" "}
            {failedStep.message}
          </p>
        </div>
      )}

      {analysisResult && (
        <div className="bg-dashboard border border-border rounded-[5px] p-4 mb-6">
          <h2 className="text-white text-lg font-semibold mb-4">
            Environment Analysis
          </h2>
          <div className="text-gray-400 text-sm space-y-2">
            <p>
              <strong className="text-white">Project Type:</strong>{" "}
              {analysisResult.projectType}
            </p>
            <p>
              <strong className="text-white">Language Version:</strong>{" "}
              {analysisResult.languageVersion}
            </p>
            <p>
              <strong className="text-white">Dependencies:</strong>{" "}
              {analysisResult.dependencies.join(", ")}
            </p>
            {analysisResult.environmentVariables && (
              <p>
                <strong className="text-white">Environment Variables:</strong>{" "}
                {analysisResult.environmentVariables.join(", ")}
              </p>
            )}
            {analysisResult.notes && (
              <p>
                <strong className="text-white">Notes:</strong>{" "}
                {analysisResult.notes}
              </p>
            )}
          </div>
          <div className="mt-6">
            <h3 className="text-white text-md font-semibold mb-2">
              Dockerfile
            </h3>
            <pre className="bg-gray-800 text-gray-300 p-4 rounded-md overflow-x-auto text-sm">
              {analysisResult.dockerfile}
            </pre>
          </div>
          {overallElapsedTime > 0 && (
            <p className="text-gray-400 text-sm mt-4">
              Total Setup Time: {overallElapsedTime.toFixed(0)} seconds
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default EnvironmentSetup;

================
File: app/_common/components/workspace/steps/EnvironmentSetup2.tsx
================
// EnvironmentSetup.tsx
import React, { useEffect, useState, useRef } from "react";
import { useClaudeAnalysis } from "@/hooks/useClaudeAnalysis";
import { useNotificationContext } from "@/contexts/NotificationContext";
import Button from "@/_common/components/Button";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faCheckCircle,
  faCircleNotch,
  faTimesCircle,
} from "@fortawesome/free-solid-svg-icons";

interface EnvironmentSetupProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
  onComplete: (success: boolean) => void;
}

interface StepError {
  stepKey: string;
  message: string;
}

const steps = [
  { name: "Cloning Repository", key: "cloning" },
  { name: "Processing Repository", key: "processing" },
  { name: "Analyzing Repository", key: "analyzing" },
];

const EnvironmentSetup: React.FC<EnvironmentSetupProps> = ({
  workspaceData,
  updateWorkspaceData,
  onComplete,
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState<string[]>([]);
  const [failedStep, setFailedStep] = useState<StepError | null>(null);
  const [analysisResult, setAnalysisResult] = useState<any | null>(null);
  const { analyzeRepository } = useClaudeAnalysis();
  const { showNotification } = useNotificationContext();

  const hasStartedProcess = useRef(false);

  useEffect(() => {
    if (workspaceData.repository && !hasStartedProcess.current) {
      hasStartedProcess.current = true;
      startProcess();
    }
  }, [workspaceData.repository]);

  const startProcess = async () => {
    setCurrentStep(0);
    setCompletedSteps([]);
    setFailedStep(null);
    setAnalysisResult(null);

    try {
      // Step 1: Clone the repository
      setCurrentStep(0);
      await cloneRepository();
      setCompletedSteps((prev) => [...prev, steps[0].key]);

      // Step 2: Process the repository
      setCurrentStep(1);
      const processData = await processRepository();
      setCompletedSteps((prev) => [...prev, steps[1].key]);

      // Step 3: Analyze the repository
      setCurrentStep(2);
      await analyzeRepo(processData.repoDir, processData.outputFilePath);
      setCompletedSteps((prev) => [...prev, steps[2].key]);

      showNotification({
        type: "success",
        title: "Environment Setup Complete",
        message: "Workspace environment is ready.",
      });

      // Notify parent component that setup is complete
      onComplete(true);
    } catch (error) {
      // Notify parent component that setup failed
      onComplete(false);
    }
  };

  const iconSizeClass = "text-xl"; // Adjusted icon size for consistency

  const cloneRepository = async () => {
    try {
      const response = await axios.post("/api/clone-repository", {
        repoFullName: workspaceData.repository,
      });
      // Store repoDir for subsequent steps
      updateWorkspaceData({ repoDir: response.data.repoDir });
    } catch (error) {
      setFailedStep({
        stepKey: steps[0].key,
        message: error.response?.data?.error || "Failed to clone repository.",
      });
      showNotification({
        type: "error",
        title: "Cloning Failed",
        message:
          error.response?.data?.error || "An error occurred while cloning.",
      });
      onComplete(false);
      throw error;
    }
  };

  const processRepository = async () => {
    try {
      const response = await axios.post("/api/process-repository", {
        repoDir: workspaceData.repoDir,
      });
      return {
        repoDir: response.data.repoDir,
        outputFilePath: response.data.outputFilePath,
      };
    } catch (error) {
      setFailedStep({
        stepKey: steps[1].key,
        message: error.response?.data?.error || "Failed to process repository.",
      });
      showNotification({
        type: "error",
        title: "Processing Failed",
        message:
          error.response?.data?.error || "An error occurred during processing.",
      });
      onComplete(false);
      throw error;
    }
  };

  const analyzeRepo = async (repoDir: string, outputFilePath: string) => {
    try {
      const analysisData = await analyzeRepository(repoDir, outputFilePath);
      setAnalysisResult(analysisData);
      updateWorkspaceData({
        environmentAnalysis: analysisData,
      });
    } catch (error) {
      setFailedStep({
        stepKey: steps[2].key,
        message: error.response?.data?.error || "Failed to analyze repository.",
      });
      showNotification({
        type: "error",
        title: "Analysis Failed",
        message:
          error.response?.data?.error || "An error occurred during analysis.",
      });
      onComplete(false);
      throw error;
    }
  };

  const renderStepIcon = (stepKey: string, index: number) => {
    if (failedStep?.stepKey === stepKey) {
      return (
        <FontAwesomeIcon
          icon={faTimesCircle}
          className={`${iconSizeClass} text-red-500`}
        />
      );
    } else if (completedSteps.includes(stepKey)) {
      return (
        <FontAwesomeIcon
          icon={faCheckCircle}
          className={`${iconSizeClass} text-green-500 animate-checkmark`}
        />
      );
    } else if (currentStep === index && !failedStep) {
      return (
        <FontAwesomeIcon
          icon={faCircleNotch}
          className={`${iconSizeClass} text-blue-500 animate-spin`}
        />
      );
    } else {
      return (
        <div
          className={`${iconSizeClass} h-6 w-6 border border-gray-500 rounded-full`}
        />
      );
    }
  };

  return (
    <div className="p-6 max-w-[1320px] mx-auto">
      <div className="mb-6">
        <h1 className="text-lg font-semibold text-white mb-4">
          Environment Setup
        </h1>
        <p className="text-gray-400 text-[13px]">
          Setting up your workspace environment. Please wait while we complete
          the steps below.
        </p>
      </div>

      <div className="mb-6">
        {steps.map((step, index) => (
          <div key={step.key} className="flex items-center mb-4">
            {renderStepIcon(step.key, index)}
            <span className="ml-4 text-white text-sm">{step.name}</span>
          </div>
        ))}
      </div>

      {failedStep && (
        <div className="mb-6">
          <p className="text-red-500 text-sm">
            Error in {steps.find((s) => s.key === failedStep.stepKey)?.name}:{" "}
            {failedStep.message}
          </p>
        </div>
      )}

      {analysisResult && (
        <div className="bg-dashboard border border-border rounded-[5px] p-4 mb-6">
          <h2 className="text-white text-lg font-semibold mb-4">
            Environment Analysis
          </h2>
          <div className="text-gray-400 text-sm space-y-2">
            <p>
              <strong className="text-white">Project Type:</strong>{" "}
              {analysisResult.projectType}
            </p>
            <p>
              <strong className="text-white">Dependencies:</strong>{" "}
              {analysisResult.dependencies.join(", ")}
            </p>
            {analysisResult.notes && (
              <p>
                <strong className="text-white">Notes:</strong>{" "}
                {analysisResult.notes}
              </p>
            )}
          </div>
          <div className="mt-6">
            <h3 className="text-white text-md font-semibold mb-2">
              Dockerfile
            </h3>
            <pre className="bg-gray-800 text-gray-300 p-4 rounded-md overflow-x-auto text-sm">
              {analysisResult.dockerfile}
            </pre>
          </div>
        </div>
      )}

      <Button
        text={
          analysisResult
            ? "Re-run Environment Setup"
            : "Start Environment Setup"
        }
        type="button"
        colorType="tertiary"
        size="small"
        handleClick={() => {
          hasStartedProcess.current = true;
          startProcess();
        }}
      />
    </div>
  );
};

export default EnvironmentSetup;

================
File: app/_common/components/workspace/steps/RepositorySelection.tsx
================
import React, { useState, useCallback, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBook } from "@fortawesome/free-solid-svg-icons";
import { formatDistanceToNow } from "date-fns";
import { useGitHubIntegration } from "@/hooks/useGitHubIntegration";
import Button from "@/_common/components/Button";

interface RepositorySelectionProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
}

const VCSOptionSkeleton = React.memo(() => (
  <div className="bg-dashboard border border-border rounded-[5px] p-4 flex flex-col justify-between overflow-hidden">
    <div>
      <div className="flex items-center mb-2">
        {/* Icon Skeleton */}
        <div className="w-6 h-6 bg-skeleton rounded mr-2 relative overflow-hidden">
          <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
        </div>
        {/* Title Skeleton */}
        <div className="h-4 bg-skeleton rounded w-24 relative overflow-hidden">
          <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
        </div>
      </div>
      {/* Line Skeletons */}
      <div className="h-3 bg-skeleton rounded w-full mb-1 relative overflow-hidden">
        <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
      </div>
      <div className="h-3 bg-skeleton rounded w-3/4 relative overflow-hidden">
        <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
      </div>
    </div>
    <div className="flex justify-between items-center mt-4">
      <div className="flex items-center">
        {/* Status Indicator Skeleton */}
        <div className="w-2 h-2 bg-skeleton rounded-full mr-2 relative overflow-hidden">
          <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
        </div>
        {/* Status Text Skeleton */}
        <div className="h-3 bg-skeleton rounded w-16 relative overflow-hidden">
          <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
        </div>
      </div>
      {/* Button Skeleton */}
      <div className="w-16 h-6 bg-skeleton rounded relative overflow-hidden">
        <div className="absolute inset-0 inset-y-0 left-0 w-full bg-shimmer animate-shimmer"></div>
      </div>
    </div>
  </div>
));

const RepositorySelection: React.FC<RepositorySelectionProps> = React.memo(
  ({ workspaceData, updateWorkspaceData }) => {
    const {
      isConnected,
      isLoading: isIntegrationLoading,
      error: integrationError,
    } = useGitHubIntegration();
    const [selectedRepo, setSelectedRepo] = useState<string | null>(
      workspaceData.repository || null
    );
    const [isImmediateLoading, setIsImmediateLoading] = useState(true);

    const fetchRepositories = useCallback(async () => {
      const response = await fetch("/api/github-repositories");
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to fetch repositories.");
      }
      const data = await response.json();
      return data.repositories;
    }, []);

    const {
      data: repositories = [],
      isLoading: isRepoLoading,
      error: repoError,
    } = useQuery({
      queryKey: ["repositories"],
      queryFn: fetchRepositories,
      staleTime: 0,
      gcTime: 0,
      enabled: isConnected && !isIntegrationLoading,
    });

    useEffect(() => {
      if (!isRepoLoading && !isIntegrationLoading) {
        setIsImmediateLoading(false);
      }
    }, [isRepoLoading, isIntegrationLoading]);

    const handleSelectRepository = useCallback(
      (repoFullName: string) => {
        console.log(repoFullName);
        setSelectedRepo(repoFullName);
        updateWorkspaceData({ repository: repoFullName });
      },
      [updateWorkspaceData]
    );

    const getStatusText = useCallback((repo) => {
      return (
        <span className="flex items-center text-xs">
          <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
          <span className="text-accent">{repo.language || "Unknown"}</span>
        </span>
      );
    }, []);

    if (integrationError) {
      return (
        <div className="p-6 max-w-[1320px] mx-auto">
          <div className="text-red-500">Error: {integrationError.message}</div>
        </div>
      );
    }

    if (!isConnected) {
      return (
        <div className="p-6 max-w-[1320px] mx-auto">
          <div className="mb-6">
            <h1 className="text-lg font-semibold text-white mb-4">
              Repository Selection
            </h1>
            <p className="text-gray-400 text-[13px]">
              Please connect your GitHub account to select a repository.
            </p>
          </div>
        </div>
      );
    }

    return (
      <div className="p-6 max-w-[1320px] mx-auto">
        <div className="mb-6">
          <h1 className="text-lg font-semibold text-white mb-4">
            Repository Selection
          </h1>
          <p className="text-gray-400 text-[13px]">
            Select a repository to use for your workspace.
          </p>
        </div>

        {isImmediateLoading || isRepoLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[...Array(4)].map((_, index) => (
              <VCSOptionSkeleton key={index} />
            ))}
          </div>
        ) : repoError ? (
          <div className="text-red-500">
            Error: {(repoError as Error).message}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {repositories.map((repo: any, index: number) => {
              const isSelected = selectedRepo === repo.full_name;
              return (
                <div
                  key={index}
                  className={`bg-dashboard border ${
                    isSelected ? "border-green-500" : "border-border"
                  } rounded-[5px] p-4 flex flex-col justify-between cursor-pointer transition-colors duration-300`}
                  onClick={() => handleSelectRepository(repo.full_name)}
                >
                  <div>
                    <div className="flex items-center">
                      <h3 className="text-white text-sm font-semibold mb-1.5">
                        {repo.name}
                      </h3>
                    </div>
                    <div className="flex items-center text-xs text-gray-400 mb-2">
                      {repo.owner.login}
                    </div>
                    <p className="text-gray-400 text-xs mb-6">
                      {repo.description || "No description provided."}
                    </p>
                  </div>
                  <div className="flex justify-between items-center mt-4">
                    {getStatusText(repo)}
                    <div className="flex items-center text-[11px] text-gray-400">
                      <span className="mr-1">Updated</span>
                      <span>
                        {formatDistanceToNow(new Date(repo.updated_at), {
                          addSuffix: true,
                        })}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    );
  }
);

export default RepositorySelection;

================
File: app/_common/components/workspace/steps/ReviewSetup.tsx
================
import React from "react";

interface ReviewSetupProps {
  workspaceData: any;
  updateWorkspaceData: (data: any) => void;
}

const ReviewSetup: React.FC<ReviewSetupProps> = ({ workspaceData }) => {
  return (
    <div>
      <h3 className="text-white text-xl mb-4">Review Your Workspace Setup</h3>
      <div className="space-y-4">
        <div className="bg-[#2A2A2A] p-4 rounded-lg">
          <h4 className="text-white font-semibold mb-2">
            Version Control System
          </h4>
          <p className="text-gray-400">{workspaceData.vcs}</p>
        </div>
        <div className="bg-[#2A2A2A] p-4 rounded-lg">
          <h4 className="text-white font-semibold mb-2">Repository</h4>
          <p className="text-gray-400">{workspaceData.repositoryId}</p>
        </div>
        <div className="bg-[#2A2A2A] p-4 rounded-lg">
          <h4 className="text-white font-semibold mb-2">Branch</h4>
          <p className="text-gray-400">{workspaceData.branch}</p>
        </div>
        <div className="bg-[#2A2A2A] p-4 rounded-lg">
          <h4 className="text-white font-semibold mb-2">
            Development Environment
          </h4>
          <p className="text-gray-400">{workspaceData.environment}</p>
        </div>
      </div>
      <p className="text-gray-400 mt-6">
        Please review your workspace setup. If everything looks correct, click
        "Create" to set up your new workspace.
      </p>
    </div>
  );
};

export default ReviewSetup;

================
File: app/_common/components/workspace/steps/VCSSelection.tsx
================
import React, { useState, useEffect, useCallback } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faGithub,
  faGitlab,
  faBitbucket,
} from "@fortawesome/free-brands-svg-icons";
import { faCode } from "@fortawesome/free-solid-svg-icons";
import Button from "@/_common/components/Button";
import { useGitHubIntegration } from "@/hooks/useGitHubIntegration";

const vcsOptions = [
  {
    name: "GitHub",
    icon: faGithub,
    description:
      "Connect your GitHub, pick your repository, and start coding instantly with Intra's automatic workspaces.",
  },
  {
    name: "GitLab",
    icon: faGitlab,
    description:
      "Link your GitLab account, choose your project, and get a ready-to-code environment with Intra's automated workspaces.",
  },
  {
    name: "Bitbucket",
    icon: faBitbucket,
    description:
      "Sync your Bitbucket repository, select your project, and start developing immediately with Intra's seamless workspaces.",
  },
  {
    name: "Blank Workspace",
    icon: faCode,
    description:
      "Start with an empty environment, fully customizable to your needs. Configure your workspace from scratch without linking to any repository.",
  },
];

const VCSOptionSkeleton = React.memo(() => (
  <div className="bg-dashboard border border-border rounded-[5px] p-4 flex flex-col justify-between overflow-hidden">
    <div>
      <div className="flex items-center mb-2">
        {/* Icon Skeleton */}
        <div className="w-6 h-6 bg-skeleton rounded mr-2 relative overflow-hidden">
          <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
        </div>
        {/* Title Skeleton */}
        <div className="h-4 bg-skeleton rounded w-24 relative overflow-hidden">
          <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
        </div>
      </div>
      {/* Line Skeletons */}
      <div className="h-3 bg-skeleton rounded w-full mb-1 relative overflow-hidden">
        <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
      </div>
      <div className="h-3 bg-skeleton rounded w-3/4 relative overflow-hidden">
        <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
      </div>
    </div>
    <div className="flex justify-between items-center mt-4">
      <div className="flex items-center">
        {/* Status Indicator Skeleton */}
        <div className="w-2 h-2 bg-skeleton rounded-full mr-2 relative overflow-hidden">
          <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
        </div>
        {/* Status Text Skeleton */}
        <div className="h-3 bg-skeleton rounded w-16 relative overflow-hidden">
          <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
        </div>
      </div>
      {/* Button Skeleton */}
      <div className="w-16 h-6 bg-skeleton rounded relative overflow-hidden">
        <div className="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shimmer w-full h-full"></div>
      </div>
    </div>
  </div>
));

interface VCSSelectionProps {
  workspaceData: {
    vcs?: string | null;
  };
  updateWorkspaceData: (data: { vcs: string | null }) => void;
}

const VCSSelection: React.FC<VCSSelectionProps> = React.memo(
  ({ workspaceData, updateWorkspaceData }) => {
    const [selectedVCS, setSelectedVCS] = useState<string | null>(
      workspaceData.vcs || null
    );
    const [isLoading, setIsLoading] = useState(true);
    const { isPending, isConnected, githubOrgName, initiateInstall, error } =
      useGitHubIntegration();

    useEffect(() => {
      updateWorkspaceData({ vcs: selectedVCS });
    }, [selectedVCS, updateWorkspaceData]);

    const handleSelect = useCallback(
      (vcsName: string) => {
        if (vcsName === "GitHub") {
          if (isConnected) {
            setSelectedVCS(vcsName);
          } else {
            initiateInstall();
          }
        } else if (vcsName === "Blank Workspace") {
          setSelectedVCS(vcsName);
        }
        // No action for other VCS options yet
      },
      [isConnected, initiateInstall]
    );

    const handleDisable = useCallback(async () => {
      // Logic to disable integration
      // This is a placeholder and should be implemented based on your requirements
      console.log("Disabling integration...");
    }, []);

    const getButtonProps = useCallback(
      (option: { name: string }) => {
        if (option.name === "GitHub") {
          if (isConnected) {
            return {
              text: "Disable",
              colorType: "danger" as const,
              handleClick: (e: React.MouseEvent) => {
                e.stopPropagation();
                handleDisable();
              },
            };
          } else {
            return {
              text: "Connect",
              colorType: "secondary" as const,
              handleClick: (e: React.MouseEvent) => {
                e.stopPropagation();
                initiateInstall();
              },
            };
          }
        } else if (option.name === "Blank Workspace") {
          return null;
        } else {
          return null;
        }
      },
      [isConnected, initiateInstall, handleDisable]
    );

    const getStatusText = useCallback(
      (option: { name: string }) => {
        if (option.name === "GitHub" && isConnected) {
          return (
            <span className="flex items-center text-xs">
              <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
              <span className="text-accent">{githubOrgName}</span>
            </span>
          );
        } else if (option.name === "Blank Workspace") {
          return (
            <span className="flex items-center text-xs">
              <span className="w-2 h-2 bg-accent rounded-full mr-2"></span>
              <span className="text-accent">Create From Scratch</span>
            </span>
          );
        } else if (option.name === "GitHub" && !isConnected) {
          return (
            <span className="flex items-center text-xs">
              <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
              <span className="text-red-500">Not Connected</span>
            </span>
          );
        } else {
          return (
            <span className="flex items-center text-xs">
              <span className="w-2 h-2 bg-gray-500 rounded-full mr-2"></span>
              <span className="text-gray-500">Coming Soon</span>
            </span>
          );
        }
      },
      [isConnected, githubOrgName]
    );

    if (error) {
      return (
        <div className="p-6 max-w-[1320px] mx-auto">
          <div className="text-red-500">Error: {error.message}</div>
        </div>
      );
    }

    return (
      <div className="p-6 max-w-[1320px] mx-auto">
        <div className="mb-6">
          <h1 className="text-lg font-semibold text-white mb-4">
            Version Control Integration
          </h1>
          <p className="text-gray-400 text-[13px]">
            Connect and manage your repositories effortlessly. Select your
            preferred version control system, and Intra will set up your
            workspace for seamless, real-time collaboration.
          </p>
        </div>

        {isPending ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[...Array(4)].map((_, index) => (
              <VCSOptionSkeleton key={index} />
            ))}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {vcsOptions.map((option, index) => {
              const isSelected = selectedVCS === option.name;
              const isDisabled =
                option.name === "GitLab" || option.name === "Bitbucket";
              return (
                <div
                  key={index}
                  className={`bg-dashboard border ${
                    isSelected ? "border-green-500" : "border-border"
                  } rounded-[5px] p-4 flex flex-col justify-between cursor-pointer ${
                    isDisabled ? "opacity-50 cursor-not-allowed" : ""
                  } transition-colors duration-300`}
                  onClick={() => {
                    if (isDisabled) return;
                    handleSelect(option.name);
                  }}
                >
                  <div>
                    <div className="flex items-center mb-2">
                      <FontAwesomeIcon
                        icon={option.icon}
                        className="text-white mr-2"
                        size="lg"
                      />
                      <h3 className="text-white text-sm font-semibold">
                        {option.name}
                      </h3>
                    </div>
                    <p className="text-gray-400 text-xs">
                      {option.description}
                    </p>
                  </div>
                  <div className="flex justify-between items-center mt-4">
                    {getStatusText(option)}
                    {getButtonProps(option) && (
                      <Button
                        {...getButtonProps(option)!}
                        size="xs"
                        type="button"
                      />
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    );
  }
);

export default VCSSelection;

================
File: app/_common/components/workspace/WorkspaceCreationModal.tsx
================
// WorkspaceCreationModal.tsx
import React, { useState, useCallback } from "react";
import Button from "@/_common/components/Button";
import ProgressDots from "@/_common/components/ProgressDots";
import VCSSelection from "./steps/VCSSelection";
import RepositorySelection from "./steps/RepositorySelection";
import EnvironmentSetup from "./steps/EnvironmentSetup";
import Configuration from "./steps/Configuration";
import ReviewSetup from "./steps/ReviewSetup";
import { CodeOutlined, ChevronRight } from "@mui/icons-material";
import { useGitHubIntegration } from "@/hooks/useGitHubIntegration";
import { AnimatePresence, motion } from "framer-motion";

interface WorkspaceCreationModalProps {
  onClose: () => void;
}

interface WorkspaceData {
  [key: string]: any;
}

const steps = [
  { title: "VCS Integration", component: VCSSelection },
  { title: "Repository Selection", component: RepositorySelection },
  { title: "Environment Setup", component: EnvironmentSetup },
  { title: "Configuration", component: Configuration },
  { title: "Review", component: ReviewSetup },
];

const WorkspaceCreationModal: React.FC<WorkspaceCreationModalProps> =
  React.memo(({ onClose }) => {
    const [currentStep, setCurrentStep] = useState<number>(0);
    const [direction, setDirection] = useState<1 | -1>(1); // 1 for forward, -1 for backward
    const [workspaceData, setWorkspaceData] = useState<WorkspaceData>({});
    const [isEnvironmentSetupComplete, setIsEnvironmentSetupComplete] =
      useState<boolean>(false);

    const { isConnected, initiateInstall } = useGitHubIntegration();

    const handleNext = useCallback(() => {
      if (currentStep === 0 && workspaceData.vcs === "GitHub" && !isConnected) {
        initiateInstall();
        return;
      }
      if (currentStep < steps.length - 1) {
        setDirection(1);
        setCurrentStep((prevStep) => prevStep + 1);
      } else {
        onClose();
      }
    }, [currentStep, workspaceData.vcs, isConnected, initiateInstall, onClose]);

    const handleBack = useCallback(() => {
      if (currentStep > 0) {
        setDirection(-1);
        setCurrentStep((prevStep) => prevStep - 1);
      }
    }, [currentStep]);

    const updateWorkspaceData = useCallback((data: WorkspaceData) => {
      setWorkspaceData((prevData) => ({ ...prevData, ...data }));
    }, []);

    const CurrentStepComponent = steps[currentStep].component;

    const isNextEnabled = useCallback(() => {
      if (currentStep === 0) {
        return !!workspaceData.vcs;
      } else if (currentStep === 1) {
        return !!workspaceData.repository;
      } else if (currentStep === 2) {
        return isEnvironmentSetupComplete;
      }
      return true;
    }, [
      currentStep,
      workspaceData.vcs,
      workspaceData.repository,
      isEnvironmentSetupComplete,
    ]);

    const handleEnvironmentSetupComplete = useCallback((success: boolean) => {
      setIsEnvironmentSetupComplete(success);
    }, []);

    // Animation variants for Framer Motion
    const variants = {
      enter: (direction: number) => ({
        x: direction > 0 ? 300 : -300,
        opacity: 0,
      }),
      center: {
        x: 0,
        opacity: 1,
      },
      exit: (direction: number) => ({
        x: direction > 0 ? -300 : 300,
        opacity: 0,
      }),
    };

    const transition = {
      x: { type: "spring", stiffness: 300, damping: 30 },
      opacity: { duration: 0.2 },
    };

    return (
      <div
        className="bg-primary rounded-[5px] border border-border overflow-hidden flex flex-col workspace-modal"
        style={{
          width: "800px",
          height: "650px",
        }}
      >
        <div className="border-b border-gray-700 min-h-[54px] h-[54px] px-6 flex justify-between items-center">
          <div className="flex items-center text-[11px] text-gray-400">
            <CodeOutlined fontSize="small" className="mr-2" />
            <span>Team - Engineering</span>
            <ChevronRight fontSize="small" className="mx-2" />
            <span>Virtual Workspaces</span>
            <ChevronRight fontSize="small" className="mx-2" />
            <span>New Workspace</span>
            <ChevronRight fontSize="small" className="mx-2" />
            <span className="text-tertiaryBorder">
              {steps[currentStep].title}
            </span>
          </div>
        </div>
        <div className="flex-grow overflow-hidden relative">
          <AnimatePresence initial={false} custom={direction}>
            <motion.div
              key={currentStep}
              custom={direction}
              variants={variants}
              initial="enter"
              animate="center"
              exit="exit"
              transition={transition}
              className="absolute inset-0 flex flex-col"
            >
              <div className="p-6 flex-grow overflow-y-auto">
                <CurrentStepComponent
                  workspaceData={workspaceData}
                  updateWorkspaceData={updateWorkspaceData}
                  onComplete={handleEnvironmentSetupComplete}
                />
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
        <div className="border-t border-gray-700 min-h-[54px] h-[54px] px-6 flex items-center justify-between">
          <Button
            text="Back"
            size="small"
            type="button"
            colorType="secondary"
            handleClick={handleBack}
            disabled={currentStep === 0}
          />
          <div className="flex-grow flex justify-center">
            <ProgressDots currentStep={currentStep} totalSteps={steps.length} />
          </div>
          <Button
            text={currentStep === steps.length - 1 ? "Create" : "Continue"}
            size="small"
            type="button"
            colorType="tertiary"
            handleClick={handleNext}
            disabled={!isNextEnabled()}
          />
        </div>
      </div>
    );
  });

export default WorkspaceCreationModal;

================
File: app/_common/components/Button.tsx
================
import React from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";

interface ButtonProps {
  oauthType?: "google" | "github";
  icon?: IconDefinition;
  text: string;
  type: "submit" | "reset" | "button" | undefined;
  handleClick?: () => void;
  loading?: boolean;
  disabled?: boolean; // New prop for disabled state
  size?: "xxs" | "xs" | "normal" | "small" | "medium" | "large";
  colorType?: "primary" | "secondary" | "tertiary" | "success" | "danger";
}

export default function Button({
  text,
  type,
  handleClick,
  icon,
  loading = false,
  disabled = false, // Default value for disabled
  size = "normal",
  colorType = "primary",
}: ButtonProps) {
  // Define size classes
  const sizeClasses = {
    xxs: "px-3 text-[9px]",
    xs: "px-4 text-[10px]",
    small: "px-5 py-0.5 text-xs",
    medium: "px-5 py-2 text-base",
    normal: "px-5 py-3 text-base",
    large: "px-6 py-4 text-lg",
  };

  // Define color classes based on the colorType prop, matching global.css variables
  const colorClasses = {
    primary: "bg-primary text-neutral border-border hover:brightness-125",
    secondary:
      "bg-secondary text-neutral border-secondaryBorder hover:brightness-125",
    tertiary:
      "bg-tertiary text-neutral border-tertiaryBorder hover:brightness-125",
    success: "bg-green-500 text-white border-green-500 hover:brightness-125",
    danger: "bg-red-500 text-white border-red-500 hover:brightness-125",
  };

  // Define disabled class
  const disabledClass = "opacity-50 cursor-not-allowed";

  return (
    <div>
      <button
        onClick={handleClick}
        type={type}
        className={`w-full relative flex items-center justify-center whitespace-nowrap rounded border 
         ${colorClasses[colorType]} ${
          sizeClasses[size]
        } leading-6 shadow-sm transition duration-300 ease-in-out
         ${disabled || loading ? disabledClass : ""}`}
        disabled={disabled || loading}
      >
        <span className="flex items-center font-medium justify-center">
          {loading ? (
            <div className="loader-container">
              <div className="loader"></div>
            </div>
          ) : (
            text
          )}
        </span>
        {icon && !loading && (
          <FontAwesomeIcon
            icon={icon}
            className={`ml-2 ${
              size === "xxs"
                ? "text-sm"
                : size === "xs"
                ? "text-base"
                : size === "small"
                ? "text-lg"
                : size === "large"
                ? "text-2xl"
                : "text-xl"
            }`}
          />
        )}
      </button>
    </div>
  );
}

================
File: app/_common/components/Input.tsx
================
import React from "react";
import { DetailedHTMLProps, InputHTMLAttributes } from "react";
import { FieldError } from "react-hook-form";

type NativeInputProps = DetailedHTMLProps<
  InputHTMLAttributes<HTMLInputElement>,
  HTMLInputElement
>;

type CustomInputProps = {
  label: string;
  error: FieldError | undefined;
};

type InputProps = CustomInputProps & NativeInputProps;

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, ...inputProps }, ref) => {
    return (
      <div className="relative mt-6">
        <label className="block text-sm font-medium text-accent mb-2">
          {label}
        </label>
        <input
          {...inputProps}
          ref={ref}
          className={`block w-full bg-primary text-neutral border border-solid rounded-md p-3 shadow-sm placeholder-secondary ${
            error
              ? "border-red-500 focus:border-red-500 animate-shake"
              : "border-border focus:border-border"
          } focus:outline-none focus:shadow-none hover:brightness-110 transition duration-200 ease-in-out sm:text-sm sm:leading-6`}
        />
        <div className="relative">
          {error && (
            <p className="left-0 top-full mt-1 text-xs text-red-500 animate-slideIn">
              {error.message}
            </p>
          )}
        </div>
      </div>
    );
  }
);
Input.displayName = "Input";
export default Input;

================
File: app/_common/components/Modal.tsx
================
import React, { useEffect, useState } from "react";
import { X } from "lucide-react";

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {
  const [isAnimating, setIsAnimating] = useState(false);
  const [modalContent, setModalContent] = useState<React.ReactNode>(null);

  useEffect(() => {
    if (isOpen) {
      setIsAnimating(true);
      setModalContent(children);
    } else {
      const timer = setTimeout(() => {
        setIsAnimating(false);
        setModalContent(null);
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [isOpen, children]);

  return (
    <div
      className={`fixed inset-0 z-50 flex items-center rounded-[5px] justify-center transition-opacity duration-300 ${
        isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
      }`}
    >
      <div
        className="fixed inset-0 bg-black bg-opacity-50"
        onClick={onClose}
      ></div>
      <div
        className={`relative bg-primary rounded-[5px] shadow-xl overflow-hidden transition-all duration-300 ease-in-out ${
          isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"
        }`}
      >
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors duration-200"
        >
          <X size={24} />
        </button>
        <div className="modal-content transition-all duration-300 ease-in-out">
          {modalContent}
        </div>
      </div>
    </div>
  );
};

export default Modal;

================
File: app/_common/components/Notification.tsx
================
import React, { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTimes,
  faExclamationTriangle,
  faCheckCircle,
  faInfoCircle,
  faExclamationCircle,
} from "@fortawesome/free-solid-svg-icons";

type NotificationType = "success" | "info" | "warning" | "error";

type NotificationProps = {
  type: NotificationType;
  title: string;
  message: string;
  onClose: () => void;
  duration?: number;
};

const iconMap = {
  success: faCheckCircle,
  info: faInfoCircle,
  warning: faExclamationCircle,
  error: faExclamationTriangle,
};

const colorMap = {
  success: "text-green-500",
  info: "text-blue-500",
  warning: "text-yellow-500",
  error: "text-red-500",
};

export default function Notification({
  type,
  title,
  message,
  onClose,
  duration = 5000,
}: NotificationProps) {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    if (!isVisible) {
      const timer = setTimeout(onClose, 300);
      return () => clearTimeout(timer);
    }

    const autoCloseTimer = setTimeout(() => {
      setIsVisible(false);
    }, duration);

    return () => clearTimeout(autoCloseTimer);
  }, [isVisible, onClose, duration]);

  const icon = iconMap[type];
  const colorClass = colorMap[type];

  return isVisible ? (
    <div
      className={`fixed z-50 bottom-4 right-4 w-96 bg-[#212121] rounded-md shadow-lg overflow-hidden
      ${isVisible ? "animate-slideIn" : "animate-slideOut"}`}
    >
      {/* Vertical bar on the left side */}
      <div className={`w-2 bg-secondary h-full absolute left-0`}></div>
      <div className="flex items-start p-4 pl-6 relative">
        <FontAwesomeIcon
          icon={icon}
          className={`${colorClass} h-5 w-5 mt-0.5 mr-3 flex-shrink-0`}
        />
        <div className="flex-grow">
          <h3 className={`${colorClass} text-sm font-medium`}>{title}</h3>
          <p className="text-gray-300 text-xs mt-1">{message}</p>
        </div>
        <button
          onClick={() => setIsVisible(false)}
          className="text-gray-400 hover:text-gray-300 absolute right-2 top-2 focus:outline-none  flex-shrink-0"
        >
          <FontAwesomeIcon icon={faTimes} className="h-4 w-4" />
        </button>
      </div>
    </div>
  ) : null;
}

================
File: app/_common/components/OauthButton.tsx
================
"use client";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { redirect } from "next/navigation";
import { createClient } from "@/lib/supabase/supabase-server";
import { handleOAuth } from "@/(auth)/actions";

interface OauthButtonProps {
  oauthType: "google" | "github";
  icon: IconDefinition;
  text: string;
}

export default function OauthButton({
  text,
  icon,
  oauthType,
}: OauthButtonProps) {
  return (
    <form action={handleOAuth}>
      {/* Hidden input to pass oauthType */}
      <input type="hidden" name="oauthType" value={oauthType} />

      <button
        type="submit"
        className={`relative flex items-center justify-center w-full mt-0 rounded border  ${
          oauthType === "google"
            ? "bg-secondary border-secondaryBorder"
            : "bg-primary border-secondary"
        } px-3 py-3 text-sm leading-6 text-white shadow-sm hover:brightness-125 transition duration-300 ease-in-out`}
      >
        <FontAwesomeIcon
          icon={icon}
          className="absolute left-16 sm:w-20 sm:left-14 text-accent text-xl"
        />
        <span className="flex items-center text-accent font-normal justify-center w-full">
          {text}
        </span>
      </button>
    </form>
  );
}

================
File: app/_common/components/ProgressDots.tsx
================
import React from "react";

interface ProgressDotsProps {
  currentStep: number;
  totalSteps: number;
}

const ProgressDots: React.FC<ProgressDotsProps> = ({
  currentStep,
  totalSteps,
}) => {
  return (
    <div className="flex space-x-2">
      {[...Array(totalSteps)].map((_, index) => (
        <div
          key={index}
          className={`w-2 h-2 rounded-full transition-all duration-300 ${
            index === currentStep ? "bg-gray-400 scale-125" : "bg-gray-600"
          }`}
        />
      ))}
    </div>
  );
};

export default ProgressDots;

================
File: app/_common/components/Spinner.tsx
================
// Spinner.tsx
import React from "react";

export const Spinner: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    className={`animate-spin ${className}`}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8v8H4z"
    />
  </svg>
);

================
File: app/_common/components/ToolTip.tsx
================
import React, { useState, useRef, useEffect } from "react";

interface TooltipProps {
  content: React.ReactNode;
  children: React.ReactElement;
}

export const Tooltip: React.FC<TooltipProps> = ({ content, children }) => {
  const [isVisible, setIsVisible] = useState(false);
  const tooltipRef = useRef<HTMLDivElement>(null);
  const targetRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        tooltipRef.current &&
        !tooltipRef.current.contains(event.target as Node)
      ) {
        setIsVisible(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const showTooltip = () => setIsVisible(true);
  const hideTooltip = () => setIsVisible(false);

  return (
    <div className="relative inline-block" ref={targetRef}>
      {React.cloneElement(children, {
        onMouseEnter: showTooltip,
        onMouseLeave: hideTooltip,
        onFocus: showTooltip,
        onBlur: hideTooltip,
        "aria-describedby": "tooltip",
      })}
      {isVisible && (
        <div
          ref={tooltipRef}
          className="absolute z-50 p-2 bg-gray-800 text-white text-sm rounded-md shadow-lg"
          style={{
            top: "calc(100% + 5px)",
            left: "50%",
            transform: "translateX(-50%)",
            minWidth: "150px",
          }}
        >
          <div className="flex flex-col space-y-1">
            {React.Children.map(content, (item, index) => (
              <div key={index} className="flex items-center space-x-2">
                {item}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Tooltip;

================
File: app/_models/User.ts
================
import { DataTypes } from 'sequelize';
import sequelize from '../lib/sequelize';

const User = sequelize.define('User', {
  userid: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  employeeid: {
    type: DataTypes.UUID,
    allowNull: false,
  },
  username: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  passwordhash: {
    type: DataTypes.STRING,
    allowNull: false,
  },
});

export default User;

================
File: app/(auth)/login/error.tsx
================
"use client"; // Error components must be Client Components

import { useEffect } from "react";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error);
  }, [error]);

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-900">
      <div className="text-center p-8 bg-gray-800 rounded-md shadow-md">
        <h2 className="text-3xl font-bold text-white">Something went wrong.</h2>
        <p className="text-gray-400 mt-4">
          An error occurred while loading the page. Please try again later.
        </p>
        <button
          onClick={() => reset()}
          className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition"
        >
          Try Again
        </button>
      </div>
    </div>
  );
}

================
File: app/(auth)/login/page.tsx
================
import Image from "next/image";
import IntraLogo from "@/_assets/intra logo-3-large-transparent.png";
export default function LoginPage() {
  return (
    <div className="flex flex-col items-center justify-center">
      <Image
        src={IntraLogo}
        alt="Intra Logo"
        width={100}
        height={100} // Add a height value to maintain aspect ratio
        className="rounded-lm "
      />
      <h1 className="text-center text-lg font-normal text-white mt-4">
        Log in
      </h1>
      <p className="text-center text-sm font-normal text-accent mt-1">
        Log in to your account
      </p>
    </div>
  );
}

================
File: app/(auth)/signup/page.tsx
================
import Image from "next/image";
import IntraLogo from "@/_assets/intra logo-3-large-transparent.png";
export default function SignupPage() {
  return (
    <div className="flex flex-col items-center justify-center">
      <Image
        src={IntraLogo}
        alt="Intra Logo"
        width={100}
        height={100} // Add a height value to maintain aspect ratio
        className="rounded-lm "
      />
      <h1 className="text-center text-lg font-normal text-white mt-4">
        Sign up
      </h1>
      <p className="text-center text-sm font-normal text-accent mt-1">
        Create a new account
      </p>
    </div>
  );
}

================
File: app/(auth)/actions.ts
================
"use server";

import { createClient } from "@/lib/supabase/supabase-server";
import { redirect } from "next/navigation";
import { z } from "zod";

// Define Zod schema for validation
const authSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(6, "Password must be at least 6 characters long"),
});

// Handle Login
export async function handleLogin(formData: FormData) {
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;

  // Validate the input data with Zod
  const parsedData = authSchema.safeParse({ email, password });
  if (!parsedData.success) {
    const errors = parsedData.error.format();
    return { success: false, errors }; // Return errors
  }

  const supabase = createClient();

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return { success: false, error: error.message };
  }

  // Redirect on success
  redirect("/dashboard/workspaces/");
}

// Handle Signup
export async function handleSignup(formData: FormData) {
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;

  // Validate the input data with Zod
  const parsedData = authSchema.safeParse({ email, password });
  if (!parsedData.success) {
    const errors = parsedData.error.format();
    return { success: false, errors }; // Return errors
  }

  const supabase = createClient();

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/dashboard/workspaces`,
    },
  });

  if (error) {
    return { success: false, error: error.message };
  }

  // Redirect on success
  redirect("/auth/confirm");
}

// Handle OAuth
export async function handleOAuth(formData: FormData) {
  const supabase = createClient();
  const provider = formData.get("oauthType") as "google" | "github";

  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: provider,
    options: {
      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,
    },
  });

  if (error) {
    return { success: false, error: error.message };
  }

  if (data.url) {
    redirect(data.url);
  }

  return { success: false, error: "No redirect URL found." };
}

================
File: app/(auth)/layout.tsx
================
"use client";

import React, { useState } from "react";
import axios from "axios";
import { useMutation } from "@tanstack/react-query";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { faGithub, faGoogle } from "@fortawesome/free-brands-svg-icons";
import Input from "@/_common/components/Input";
import Button from "@/_common/components/Button";
import OauthButton from "@/_common/components/OauthButton";
import { createClient } from "@/lib/supabase/supabase-client";
import { usePathname } from "next/navigation";
import { useWebSocketContext } from "@/contexts/WebSocketContext";
import { useNotificationContext } from "@/contexts/NotificationContext";
import { handleLogin, handleSignup } from "./actions";

type LoginInputs = {
  username: string;
  password: string;
};

const loginSchema = z.object({
  username: z.string().email("Please enter a valid email address."),
  password: z
    .string()
    .min(7, "Password must be at least 7 characters long.")
    .max(25, "Password cannot exceed 25 characters."),
});

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const { showNotification } = useNotificationContext();

  const isLoginPage = pathname === "/login";
  const isSignupPage = pathname === "/signup";

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginInputs>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit: SubmitHandler<LoginInputs> = async (data: LoginInputs) => {
    try {
      setIsLoading(true);

      // Check if it's a valid page (login/signup)
      if (!isLoginPage && !isSignupPage) {
        throw new Error("Invalid navigation. Please try again.");
      }

      // Create FormData to send to the server
      const formData = new FormData();
      formData.append("email", data.username);
      formData.append("password", data.password);

      // Call server-side actions based on the page type
      let result;
      if (isLoginPage) {
        result = await handleLogin(formData);
      } else if (isSignupPage) {
        result = await handleSignup(formData);
      }

      // Handle errors from the server response
      if (result?.success === false) {
        const errorMessage = result.errors
          ? JSON.stringify(result.errors)
          : result.error || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      // Show success message
      showNotification({
        type: "success",
        title: isLoginPage ? "Login Successful" : "Signup Successful",
        message: `Welcome, ${data.username}! Redirecting to your dashboard.`,
      });
    } catch (err) {
      // Show error notification
      showNotification({
        type: "error",
        title: isLoginPage ? "Login Error" : "Signup Error",
        message: err instanceof Error ? err.message : "Something went wrong.",
      });
    } finally {
      // Ensure loading state is cleared
      setIsLoading(false);
    }
  };

  return (
    <div className="flex h-screen items-center justify-center bg-red flex-1">
      <div className="flex flex-col w-full max-w-sm lg:w-96 items-center justify-center">
        {children}

        <div className="mt-6 w-11/12 sm:w-full">
          <div className="justify-center">
            <div className="grid gap-4">
              <OauthButton
                icon={faGoogle}
                text={"Continue with Google"}
                oauthType="google"
              />
              <OauthButton
                icon={faGithub}
                text={"Continue with Github"}
                oauthType="github"
              />
              <div className="flex items-center mt-2 justify-center">
                <div className="flex-grow border-t border-secondary"></div>
                <span className="px-4 text-sm text-accent">or</span>
                <div className="flex-grow border-t border-secondary"></div>
              </div>
            </div>
            <form onSubmit={handleSubmit(onSubmit)} className="justify-center">
              <div className="grid mb-8">
                <Input
                  label="Email Address"
                  id="email"
                  autoComplete="email"
                  error={errors.username}
                  placeholder="Enter your email"
                  {...register("username", { required: true })}
                />
                <div className="relative">
                  <Input
                    label="Password"
                    id="password"
                    autoComplete="current-password"
                    error={errors.password}
                    {...register("password", { required: true })}
                    placeholder="Enter your password"
                  />
                  <div className="grid mt-6 absolute right-0 top-0">
                    <div className="text-xs text-center mb-2">
                      <a
                        href="#"
                        className=" font-normal text-secondaryBorder hover:brightness-125"
                      >
                        Forgot password?
                      </a>
                    </div>
                  </div>
                </div>
              </div>

              <Button
                text={"Log in"}
                type={"submit"}
                handleClick={() => {}}
                loading={isLoading}
              />
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/(dashboard)/dashboard/workspaces/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import { CodeOutlined, ChevronRight, DvrOutlined } from "@mui/icons-material";
import Button from "@/_common/components/Button";
import Modal from "@/_common/components/Modal";
import WorkspaceCreationModal from "@/_common/components/workspace/WorkspaceCreationModal";
import { useGitHubIntegration } from "@/hooks/useGitHubIntegration";
import { useWebSocketContext } from "@/contexts/WebSocketContext";
import { useNotificationContext } from "@/contexts/NotificationContext";
import { createClient } from "@/lib/supabase/supabase-client";

export default function WorkspacePage() {
  const [hasWorkspaces, setHasWorkspaces] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { message } = useWebSocketContext();
  const { showNotification } = useNotificationContext();

  useEffect(() => {
    // declare the data fetching function
    const fetchData = async () => {
      const supabase = createClient();
      const data = await supabase.auth.getUser();
    };

    // call the function
    fetchData()
      // make sure to catch any error
      .catch(console.error);
  }, []);
  const handleCreateWorkspace = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div className="h-full">
      <div className="border-b border-border w-full h-11 flex items-center">
        <div className="ml-5 flex gap-2 items-center">
          <CodeOutlined fontSize="medium" className="text-tertiaryBorder" />
          <p className="text-xs text-accent">Team - Engineering</p>
          <ChevronRight fontSize="small" className="text-sidenav" />
          <p className="text-xs text-white">Virtual Workspaces</p>
        </div>
      </div>

      <div className="flex justify-center items-center h-[calc(100vh-44px)]">
        <div className="h-[600px] w-[1100px]">
          {hasWorkspaces ? (
            <div className="flex justify-between">
              <h1 className="text-accent text-2xl">Virtual Workspaces</h1>
              <Button
                text={"Create new workspace"}
                type={"button"}
                colorType="tertiary"
                size="small"
                handleClick={handleCreateWorkspace}
              />
            </div>
          ) : (
            <div className="flex items-center justify-center h-full">
              <div className="flex flex-col items-center text-center max-w-[400px]">
                <DvrOutlined
                  style={{ fontSize: "50px" }}
                  className="text-white text-5xl mb-6"
                />
                <h1 className="text-white text-md mb-2">Virtual Workspaces</h1>
                <p className="text-sidenav text-[13px] mb-8">
                  Workspaces give your team a dedicated space to code,
                  collaborate, and manage projects. Install the Intra GitHub App
                  to start working efficiently and track progress in real-time.
                </p>
                <Button
                  text={"Create new workspace"}
                  type={"button"}
                  size="small"
                  colorType="tertiary"
                  handleClick={handleCreateWorkspace}
                  className="mt-10"
                />
              </div>
            </div>
          )}
        </div>
      </div>

      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>
        <WorkspaceCreationModal onClose={handleCloseModal} />
      </Modal>
    </div>
  );
}

================
File: app/(dashboard)/dashboard/workspaces/workspaces.md
================
The workflow for creating a new workspace in Intra, from clicking the "Create New Workspace" button to the workspace being fully created, involves several key steps. Below is a breakdown of each step, including backend and frontend interactions, as well as the integration of GitHub and Docker components.

### 1. **User Clicks "Create New Workspace" Button**

- **Frontend:** The user initiates the workspace creation process by clicking the "Create New Workspace" button in the Intra dashboard.
- **Backend Trigger:** A request is sent to the Intra backend to begin the process of creating a new workspace.

### 2. **Selecting VCS or Blank Workspace**

- **Frontend UI:** The user is presented with options:
  - Choose a Version Control System (VCS) like GitHub.
  - Select "Blank Workspace" if no VCS is used.
- **Backend Request:** If GitHub is selected, a request is sent to retrieve the user's repositories or prompt them to authorize GitHub.

### 3. **GitHub Authorization (If Applicable)**

- **OAuth Flow:** If the user hasn't previously linked GitHub, they are redirected to the GitHub OAuth page for authorization.
- **Token Retrieval:** Upon authorization, GitHub returns an access token to Intra, which is stored securely in the backend.
- **GitHub App Check:** If the user is using the GitHub App, the system checks for existing installations and retrieves the installation ID.

### 4. **Repository Selection**

- **Frontend UI:** After authorizing, the user selects a repository from their GitHub account to be used as the workspace source.
- **Backend Request:** Once a repository is selected, Intra pulls repository metadata (e.g., branch, files) from GitHub.

### 5. **Dependency Scanning**

- **Backend:** Intra scans the repository for any dependency files (e.g., `package.json` for Node.js, `requirements.txt` for Python).
- **Container Setup:** If dependencies are found, the backend prepares to create a Docker container that includes these dependencies. If no Dockerfile exists, Intra uses pre-configured Docker images based on the detected stack.

### 6. **Docker Container Creation**

- **Backend:**
  - Intra uses Docker to pull a base image for the programming language or stack used in the repository.
  - Dependencies are installed, and the application is set up within the container.
  - If no dependencies are found or it's a Blank Workspace, a generic development environment is created.

### 7. **Workspace Initialization**

- **Backend:**
  - The Docker container is started with all necessary configurations and scripts that Intra needs to manage the workspace.
  - Code is cloned into the container, and any initial setup steps (like installing packages) are executed.
- **Frontend Notification:** The frontend displays a loading spinner or progress bar, indicating that the workspace is being created.

### 8. **WebSocket Connection**

- **Backend:**
  - Once the workspace is initialized, Intra establishes a WebSocket connection between the frontend and backend for real-time updates (e.g., live notifications, status updates).
  - GitHub webhooks are set up to notify the workspace of any future commits or changes made in the repository.

### 9. **Workspace Launched**

- **Frontend UI:** The workspace opens up in a browser-based IDE (e.g., VS Code Cloud or Intra’s custom IDE).
  - The user can now edit, run, and test their code in real-time.
- **Backend:** The workspace remains active, running the Docker container with the project. Any changes made through the IDE are reflected in the container, and commits can be pushed back to GitHub if connected.

### 10. **Syncing to Worktree & Notifications**

- **Backend:**
  - The workspace is synced with the Intra worktree feature, showing live updates of branches and commits.
  - GitHub webhook notifications are filtered to ensure that relevant notifications (e.g., pull requests, commits) are shown to the user.
- **Frontend UI:** The user is notified of any new commits or updates via the WebSocket connection and Intra's notification system.

### 11. **Workspace Ready**

- The workspace is now fully operational, and the user can start working with their code, collaborating with team members, or managing the project from the workspace UI.

This process ensures seamless integration with GitHub, automatic Docker container creation, and a responsive, real-time development environment for the user to start coding in immediately after setup.

================
File: app/(dashboard)/dashboard/layout.tsx
================
"use client";
import { useState } from "react";
import {
  HomeOutlined,
  PeopleOutline,
  SchoolOutlined,
  StoreOutlined,
  DvrOutlined,
  AccountTreeOutlined,
  AppsOutlined,
  CodeOutlined,
  Brush,
  Campaign,
  ExpandMore,
} from "@mui/icons-material";
import Image from "next/image";
import IntraLogo from "@/_assets/intra-icon-large-transparent.png";
import { createClient } from "@/lib/supabase/supabase-client";
import { redirect } from "next/navigation";

const navItems = [
  { name: "Home", icon: HomeOutlined },
  { name: "Employees", icon: PeopleOutline },
  { name: "Onboarding", icon: SchoolOutlined },
  { name: "Marketplace", icon: StoreOutlined },
  { name: "Workspaces", icon: DvrOutlined },
  { name: "Worktrees", icon: AccountTreeOutlined },
  { name: "Integrations", icon: AppsOutlined },
];

const dropdownItems = [
  { name: "Engineering", icon: CodeOutlined },
  { name: "Design", icon: Brush },
  { name: "Marketing", icon: Campaign },
];

function DashboardLayout({ children }: { children: React.ReactNode }) {
  const [activeIndex, setActiveIndex] = useState(0);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [selectedDropdownItem, setSelectedDropdownItem] = useState(0);

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  const handleDropdownClick = (index) => {
    setSelectedDropdownItem(index);
    setDropdownOpen(false);
  };

  return (
    <div className="flex h-screen w-screen flex-row bg-dashboard">
      <div className="bg-primary w-52 rounded-md pr-0 p-3">
        <div className="w-full rounded-[3px] h-full">
          <div className="flex items-center ml-1 mt-2">
            <div className="flex rounded-[3px] bg-secondary justify-center items-center mr-2 h-8 w-8">
              <Image
                src={IntraLogo}
                alt="Intra Logo"
                width={20}
                height={20}
                className=""
              />
            </div>
            <p className="text-white text-md font-medium">Intra app</p>
          </div>
          <div className="relative mb-4 mt-6">
            <div
              className="flex items-center justify-between bg-dashboard border border-border px-2 py-3 rounded-[3px] cursor-pointer"
              onClick={toggleDropdown}
            >
              <div className="flex items-center ml-0.5">
                {/* Render the selected dropdown icon with size control */}
                {(() => {
                  const SelectedIcon = dropdownItems[selectedDropdownItem].icon;
                  return (
                    <SelectedIcon
                      className="text-tertiaryBorder mr-2"
                      fontSize="small"
                    />
                  );
                })()}
                <p className="text-white font-semibold text-xs">
                  {dropdownItems[selectedDropdownItem].name}
                </p>
              </div>
              <ExpandMore
                className={`text-white transform transition-transform ${
                  dropdownOpen ? "rotate-180" : ""
                }`}
                fontSize="small"
              />
            </div>
            {dropdownOpen && (
              <div className="absolute w-full bg-secondary mt-2 rounded-[3px] shadow-lg z-10">
                {dropdownItems.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center p-2 hover:bg-gray-700 cursor-pointer"
                    onClick={() => handleDropdownClick(index)}
                  >
                    <item.icon className="text-white mr-2" fontSize="small" />
                    <p className="text-white font-normal text-sm">
                      {item.name}
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
          <div className="w-full grid gap-2 ml">
            {navItems.map((item, index) => (
              <div
                key={index}
                className={`flex items-center p-2 rounded-[3px] cursor-pointer ${
                  activeIndex === index
                    ? "bg-secondary text-white"
                    : "text-sidenav"
                } hover:bg-secondary hover:text-white transition-all duration-100`}
                onClick={() => setActiveIndex(index)}
              >
                <div className="w-7 mr-2 flex justify-center">
                  <item.icon fontSize="small" />
                </div>
                <p className="font-medium text-xs">{item.name}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
      <div className="h-full w-full p-3 bg-primary flex items-center">
        <div className="h-full w-full bg-dashboard rounded-md border border-border">
          {children}
        </div>
      </div>
    </div>
  );
}

export default DashboardLayout;

================
File: app/(setup)/setup/actions.ts
================
"use server";

import { createClient } from "@/lib/supabase/supabase-server";
import { redirect } from "next/navigation";
import { z } from "zod";

const workspaceNameSchema = z.object({
  workspaceName: z
    .string()
    .min(3, "Workspace name must be at least 3 characters")
    .max(25, "Workspace name cannot exceed 25 characters"),
  workspaceURL: z
    .string()
    .min(10, "Workspace URL must be at least 10 characters")
    .max(35, "Workspace URL cannot exceed 35 characters"),
});

export async function handleWorkspaceCreation(formData: FormData) {
  const workspaceName = formData.get("workspaceName") as string;
  const workspaceURL = formData.get("workspaceURL") as string;

  // Validate the input data with Zod
  const parsedData = workspaceNameSchema.safeParse({
    workspaceName,
    workspaceURL,
  });
  if (!parsedData.success) {
    const errors = parsedData.error.format();
    return { success: false, errors }; // Return errors
  }

  const supabase = createClient();

  // Get the current user
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();

  if (userError) {
    return { success: false, error: "Unable to get current user." };
  }

  if (!user) {
    return { success: false, error: "User not authenticated." };
  }

  // Create the workspace
  const { data, error } = await supabase
    .from("workspaces")
    .insert({
      name: workspaceName,
      url: workspaceURL,
      user_id: user.id,
    })
    .select()
    .single();

  if (error) {
    return { success: false, error: error.message };
  }

  if (!data) {
    return { success: false, error: "Failed to create workspace." };
  }

  // Redirect on success
  //redirect(`/dashboard/workspaces/${data.id}`);
  redirect(`/dashboard/workspaces`);
}

================
File: app/(setup)/setup/page.tsx
================
import SetupProcess from "./SetupProcess";

export default function SetupPage() {
  return <SetupProcess />;
}

================
File: app/(setup)/setup/SetupProcess.tsx
================
"use client";

import React, { useState } from "react";
import Image from "next/image";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { AnimatePresence, motion } from "framer-motion";
import IntraLogo from "@/_assets/intra-icon-large-transparent.png";
import Button from "@/_common/components/Button";
import Input from "@/_common/components/Input";
import ProgressDots from "@/_common/components/ProgressDots";
import { handleWorkspaceCreation } from "@/(setup)/setup/actions";
import { useNotificationContext } from "@/contexts/NotificationContext";

const steps = ["welcome", "workspace-name"];

const workspaceNameSchema = z.object({
  workspaceName: z
    .string()
    .min(3, "Workspace name must be at least 3 characters")
    .max(25, "Workspace name cannot exceed 25 characters"),
  workspaceURL: z
    .string()
    .min(10, "Workspace URL must be at least 10 characters")
    .max(35, "Workspace URL cannot exceed 35 characters"),
});

type WorkspaceNameInput = z.infer<typeof workspaceNameSchema>;

export default function SetupProcess() {
  const [currentStep, setCurrentStep] = useState(0);
  const { showNotification } = useNotificationContext();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<WorkspaceNameInput>({
    resolver: zodResolver(workspaceNameSchema),
  });

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const onSubmit = async (data: WorkspaceNameInput) => {
    const formData = new FormData();
    formData.append("workspaceName", data.workspaceName);
    formData.append("workspaceURL", data.workspaceURL);

    const result = await handleWorkspaceCreation(formData);
    if (result?.success === false) {
      // Handle errors
      if (result.errors) {
        // Handle Zod validation errors
        const errorMessages = Object.values(result.errors).flat().join(", ");
        showNotification({
          type: "error",
          title: "Validation Error",
          message: errorMessages,
        });
      } else if (result.error) {
        // Handle other errors
        showNotification({
          type: "error",
          title: "Workspace Creation Failed",
          message: result.error,
        });
      }
    }
    // If successful, the action will handle the redirect
  };

  const Welcome = () => (
    <div className="flex flex-col items-center text-center max-w-[500px]">
      <h1 className="text-neutral text-2xl font-bold mb-4">Welcome to Intra</h1>
      <p className="text-accent text-[14px] mb-8">
        Intra helps you streamline software development, manage workspaces, and
        collaborate efficiently.
      </p>
      <div className="w-[300px] mt-4">
        <Button
          text="Get Started"
          type="button"
          colorType="tertiary"
          handleClick={nextStep}
        />
      </div>
    </div>
  );

  const WorkspaceName = () => (
    <div className="flex-grow flex items-center justify-center">
      <div className="w-[450px] px-8">
        <div className="flex flex-col items-center">
          <h1 className="text-neutral text-2xl font-bold mb-4 text-center">
            Create a new workspace
          </h1>
          <p className="text-accent text-[14px] leading-5 mb-4 text-center">
            Workspaces are shared environments where teams collaborate
            effortlessly on projects and tasks, ensuring smooth workflows
          </p>
          <form className="w-full" onSubmit={handleSubmit(onSubmit)}>
            <Input
              label="Workspace Name"
              id="workspaceName"
              placeholder="Intra Applications"
              type="text"
              error={errors.workspaceName}
              {...register("workspaceName")}
            />
            <Input
              label="Workspace URL"
              id="workspaceURL"
              placeholder="intra.com/"
              type="text"
              error={errors.workspaceURL}
              {...register("workspaceURL")}
            />
            <div className="mt-12">
              <Button text="Continue" type="submit" colorType="tertiary" />
            </div>
          </form>
        </div>
      </div>
    </div>
  );

  const renderStep = () => {
    switch (steps[currentStep]) {
      case "welcome":
        return <Welcome />;
      case "workspace-name":
        return <WorkspaceName />;
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col justify-between h-screen bg-primary">
      <div className="flex-grow flex items-center justify-center">
        <div className="flex flex-col items-center">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Image
                src={IntraLogo}
                alt="Intra Logo"
                width={80}
                height={80}
                className="mb-4"
              />
            </motion.div>
          </AnimatePresence>
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              {renderStep()}
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
      <div className="flex justify-center mb-8">
        <ProgressDots currentStep={currentStep} totalSteps={steps.length} />
      </div>
    </div>
  );
}

================
File: app/api/claude-analyze/analyzer.ts
================
// app/api/claude-analyze/analyzeScript.ts
import fs from "fs";
import yaml from "js-yaml";
import xml2js from "xml2js";
import toml from "@iarna/toml";

export async function readRepopack(filePath: string) {
  const content = fs.readFileSync(filePath, "utf-8");
  const files: Record<string, string> = {};

  const repoFilesIndex = content.indexOf("Repository Files");
  if (repoFilesIndex === -1) {
    throw new Error("Repository Files section not found in repopack.txt");
  }

  const filesContent = content.slice(repoFilesIndex);

  const fileRegex =
    /={15,}\s*File:\s*(.*?)\s*={15,}\s*([\s\S]*?)(?=(?:\n={15,}\s*File:|\s*$))/g;
  let match;

  while ((match = fileRegex.exec(filesContent)) !== null) {
    const filePath = match[1].trim();
    const fileContent = match[2].trim();
    files[filePath] = fileContent;
  }

  console.log("Files Parsed:", Object.keys(files));

  return files;
}

export async function analyzeProject(files: Record<string, string>) {
  const projectTypes = new Set<string>();
  let languageVersion = "";
  const dependencies = new Set<string>();
  const osRequirements = new Set<string>();
  const environmentVariables = new Set<string>();
  const ports = new Set<number>();
  let notes = "";

  // Helper functions
  function parseJSON(content: string) {
    try {
      return JSON.parse(content);
    } catch {
      return null;
    }
  }

  function parseYAML(content: string) {
    try {
      return yaml.load(content);
    } catch {
      return null;
    }
  }

  async function parseXML(content: string) {
    return new Promise((resolve) => {
      xml2js.parseString(content, (err, result) => {
        if (err) resolve(null);
        else resolve(result);
      });
    });
  }

  function parseTOML(content: string) {
    try {
      return toml.parse(content);
    } catch {
      return null;
    }
  }

  function extractEnvVariablesFromCode(content: string) {
    const envPatterns = [
      /process\.env\.([A-Z_][A-Z0-9_]*)/g,
      /os\.environ\.get\(['"]([A-Z_][A-Z0-9_]*)['"]\)/g,
      /ENV\[['"]([A-Z_][A-Z0-9_]*)['"]\]/g,
      /\$ENV\{([A-Z_][A-Z0-9_]*)\}/g,
      /\$([A-Z_][A-Z0-9_]*)/g,
    ];
    envPatterns.forEach((pattern) => {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        environmentVariables.add(match[1]);
      }
    });
  }

  for (const [fileName, content] of Object.entries(files)) {
    const lowerFileName = fileName.toLowerCase();

    if (lowerFileName.endsWith("package.json")) {
      // Node.js project
      projectTypes.add("Node.js");
      const packageJson = parseJSON(content);
      if (!packageJson) continue;
      const engines = packageJson.engines || {};
      languageVersion = engines.node
        ? `Node.js ${engines.node}`
        : "Node.js latest";

      // Collect dependencies
      const deps = packageJson.dependencies || {};
      const devDeps = packageJson.devDependencies || {};
      Object.entries(deps).forEach(([dep, version]) =>
        dependencies.add(`${dep}@${version}`)
      );
      Object.entries(devDeps).forEach(([dep, version]) =>
        dependencies.add(`${dep}@${version}`)
      );

      // Detect frameworks
      if ("react" in deps || "react" in devDeps) projectTypes.add("React");
      if ("react-native" in deps || "react-native" in devDeps) {
        projectTypes.add("React Native");
        osRequirements.add("Android SDK");
        osRequirements.add("iOS SDK (Xcode)");
        notes += "React Native projects require Android and iOS build tools.\n";
      }
      if ("expo" in deps || "expo" in devDeps) {
        projectTypes.add("Expo");
        notes += "Expo requires specific SDK versions.\n";
      }
      if ("express" in deps || "express" in devDeps)
        projectTypes.add("Express");
      if ("next" in deps || "next" in devDeps) projectTypes.add("Next.js");

      // Extract scripts to find build commands and ports
      const scripts = packageJson.scripts || {};
      Object.values(scripts).forEach((script) => {
        const portMatches = script.match(/(--port|PORT)\s+(\d+)/g);
        if (portMatches) {
          portMatches.forEach((match) => {
            const port = match.split(/\s+/).pop();
            ports.add(parseInt(port, 10));
          });
        }
      });

      // Extract environment variables from scripts
      Object.values(scripts).forEach((script) => {
        const envVarMatches = script.match(/([A-Z_][A-Z0-9_]*)=/g);
        if (envVarMatches) {
          envVarMatches.forEach((match) => {
            environmentVariables.add(match.replace("=", ""));
          });
        }
      });
    } else if (
      lowerFileName.endsWith("requirements.txt") ||
      lowerFileName.endsWith("pipfile")
    ) {
      // Python project
      projectTypes.add("Python");
      if (!languageVersion) languageVersion = "Python latest";

      // Collect dependencies
      const lines = content.split("\n");
      lines.forEach((line) => {
        if (line && !line.startsWith("#")) dependencies.add(line.trim());
      });
    } else if (lowerFileName.endsWith("pyproject.toml")) {
      // Python project using Poetry
      projectTypes.add("Python");
      if (!languageVersion) languageVersion = "Python latest";

      const pyprojectData = parseTOML(content);
      if (
        pyprojectData &&
        pyprojectData.tool &&
        pyprojectData.tool.poetry &&
        pyprojectData.tool.poetry.dependencies
      ) {
        Object.entries(pyprojectData.tool.poetry.dependencies).forEach(
          ([pkg, ver]) => {
            if (typeof ver === "string") dependencies.add(`${pkg}==${ver}`);
            else if (ver.version) dependencies.add(`${pkg}==${ver.version}`);
          }
        );
      }
    } else if (lowerFileName.endsWith("pom.xml")) {
      // Java project using Maven
      projectTypes.add("Java");
      const pomData = await parseXML(content);
      if (pomData && pomData.project) {
        const properties = pomData.project.properties || {};
        languageVersion = properties["java.version"]
          ? `Java ${properties["java.version"][0]}`
          : "Java latest";
        notes += "Maven project detected.\n";

        // Collect dependencies
        const deps = pomData.project.dependencies
          ? pomData.project.dependencies[0].dependency || []
          : [];
        deps.forEach((dep) => {
          const groupId = dep.groupId[0];
          const artifactId = dep.artifactId[0];
          const version = dep.version ? dep.version[0] : "latest";
          dependencies.add(`${groupId}:${artifactId}:${version}`);
        });
      }
    } else if (lowerFileName.endsWith("build.gradle")) {
      // Check if it's an Android project
      if (
        content.includes("com.android.application") ||
        content.includes("com.android.library")
      ) {
        projectTypes.add("Android");
        languageVersion = "Java latest";
        osRequirements.add("Android SDK");
        notes += "Android projects require Android SDK to build.\n";

        // Collect dependencies from build.gradle
        const depMatches = content.match(
          /implementation ['"](.+?):(.+?):(.+?)['"]/g
        );
        if (depMatches) {
          depMatches.forEach((line) => {
            const match = line.match(
              /implementation ['"](.+?):(.+?):(.+?)['"]/
            );
            if (match) {
              const group = match[1];
              const name = match[2];
              const version = match[3];
              dependencies.add(`${group}:${name}:${version}`);
            }
          });
        }
      } else {
        // Java project using Gradle
        projectTypes.add("Java");
        languageVersion = "Java latest";
        notes += "Gradle project detected.\n";

        // Collect dependencies from build.gradle
        const depMatches = content.match(
          /implementation ['"](.+?):(.+?):(.+?)['"]/g
        );
        if (depMatches) {
          depMatches.forEach((line) => {
            const match = line.match(
              /implementation ['"](.+?):(.+?):(.+?)['"]/
            );
            if (match) {
              const group = match[1];
              const name = match[2];
              const version = match[3];
              dependencies.add(`${group}:${name}:${version}`);
            }
          });
        }
      }
    } else if (lowerFileName.endsWith("go.mod")) {
      // Go project
      projectTypes.add("Go");
      const goModContent = content;
      const versionMatch = goModContent.match(/^go (\d+\.\d+)/m);
      languageVersion = versionMatch ? `Go ${versionMatch[1]}` : "Go latest";

      // Collect dependencies
      const requireMatches = goModContent.match(
        /^require\s+([\S]+)\s+([\S]+)/gm
      );
      if (requireMatches) {
        requireMatches.forEach((line) => {
          const [, pkg, ver] = line.match(/^require\s+([\S]+)\s+([\S]+)/);
          dependencies.add(`${pkg}@${ver}`);
        });
      }
    } else if (lowerFileName.endsWith("gemfile")) {
      // Ruby project
      projectTypes.add("Ruby");
      if (!languageVersion) languageVersion = "Ruby latest";
      const gemMatches = content.match(
        /gem ['"]([\S]+)['"],\s*['"]([\S]+)['"]/g
      );
      if (gemMatches) {
        gemMatches.forEach((line) => {
          const [, gem, ver] = line.match(
            /gem ['"]([\S]+)['"],\s*['"]([\S]+)['"]/
          );
          dependencies.add(`${gem}@${ver}`);
        });
      }
    } else if (lowerFileName.endsWith("composer.json")) {
      // PHP project
      projectTypes.add("PHP");
      const composerJson = parseJSON(content);
      if (!composerJson) continue;
      languageVersion =
        composerJson.require && composerJson.require.php
          ? `PHP ${composerJson.require.php}`
          : "PHP latest";

      // Collect dependencies
      const deps = composerJson.require || {};
      Object.entries(deps).forEach(([dep, version]) =>
        dependencies.add(`${dep}:${version}`)
      );
    } else if (lowerFileName.endsWith(".csproj")) {
      // .NET project
      projectTypes.add(".NET");
      languageVersion = ".NET latest";

      const csprojData = await parseXML(content);
      if (csprojData && csprojData.Project && csprojData.Project.ItemGroup) {
        csprojData.Project.ItemGroup.forEach((group) => {
          if (group.PackageReference) {
            group.PackageReference.forEach((pkg) => {
              const include = pkg.$.Include;
              const version = pkg.$.Version;
              dependencies.add(`${include}@${version}`);
            });
          }
        });
      }
    } else if (lowerFileName.endsWith("cargo.toml")) {
      // Rust project
      projectTypes.add("Rust");
      languageVersion = "Rust latest";
      const cargoData = parseTOML(content);

      // Collect dependencies
      if (cargoData && cargoData.dependencies) {
        Object.entries(cargoData.dependencies).forEach(([pkg, ver]) => {
          if (typeof ver === "string") dependencies.add(`${pkg}=${ver}`);
          else if (ver.version) dependencies.add(`${pkg}=${ver.version}`);
        });
      }
    } else if (lowerFileName.endsWith(".swift")) {
      // Swift project
      projectTypes.add("Swift");
      if (!languageVersion) languageVersion = "Swift latest";
    } else if (lowerFileName.endsWith("package.swift")) {
      // Swift Package Manager
      projectTypes.add("Swift");
      if (!languageVersion) languageVersion = "Swift latest";
      // Parse Package.swift to get dependencies
      const depMatches = content.match(
        /\.package\(url:\s*['"](.+?)['"],\s*(?:from:|exact:)\s*['"](.+?)['"]\)/g
      );
      if (depMatches) {
        depMatches.forEach((line) => {
          const match = line.match(
            /\.package\(url:\s*['"](.+?)['"],\s*(?:from:|exact:)\s*['"](.+?)['"]\)/
          );
          if (match) {
            const url = match[1];
            const ver = match[2];
            dependencies.add(`${url}@${ver}`);
          }
        });
      }
    } else if (
      lowerFileName.endsWith(".xcodeproj") ||
      lowerFileName.endsWith(".xcworkspace") ||
      lowerFileName.endsWith("info.plist") ||
      lowerFileName.endsWith("project.pbxproj")
    ) {
      projectTypes.add("iOS");
      if (!languageVersion) languageVersion = "Swift latest";
      osRequirements.add("macOS");
      notes += "iOS projects require macOS to build.\n";
    } else if (
      lowerFileName.endsWith("podfile") ||
      lowerFileName.endsWith("podfile.lock")
    ) {
      projectTypes.add("iOS");
      if (!languageVersion) languageVersion = "Swift latest";
      osRequirements.add("macOS");
      notes += "iOS projects require macOS to build.\n";
      // Parse Podfile to get dependencies
      const podMatches = content.match(
        /pod ['"]([\w\/\-]+)['"](?:,\s*['"]([\S]+)['"])?/g
      );
      if (podMatches) {
        podMatches.forEach((line) => {
          const match = line.match(
            /pod ['"]([\w\/\-]+)['"](?:,\s*['"]([\S]+)['"])?/
          );
          if (match) {
            const pod = match[1];
            const ver = match[2] || "latest";
            dependencies.add(`${pod}@${ver}`);
          }
        });
      }
    } else if (lowerFileName.endsWith("pubspec.yaml")) {
      // Dart/Flutter project
      projectTypes.add("Dart/Flutter");
      const pubspecData = parseYAML(content);
      if (
        pubspecData &&
        pubspecData.environment &&
        pubspecData.environment.sdk
      ) {
        languageVersion = `Dart ${pubspecData.environment.sdk}`;
      }

      // Collect dependencies
      const deps = pubspecData.dependencies || {};
      Object.entries(deps).forEach(([dep, version]) =>
        dependencies.add(`${dep}:${version}`)
      );
    }

    // Extract environment variables from code files
    if (
      [
        ".js",
        ".jsx",
        ".ts",
        ".tsx",
        ".py",
        ".rb",
        ".php",
        ".sh",
        ".pl",
        ".go",
        ".rs",
        ".swift",
      ].some((ext) => lowerFileName.endsWith(ext))
    ) {
      extractEnvVariablesFromCode(content);
    }
  }

  return {
    projectTypes: Array.from(projectTypes),
    languageVersion,
    dependencies: Array.from(dependencies),
    osRequirements: Array.from(osRequirements),
    environmentVariables: Array.from(environmentVariables),
    ports: Array.from(ports).map(Number),
    notes: notes.trim(),
  };
}

export function generateDockerfile(
  analysis: Awaited<ReturnType<typeof analyzeProject>>,
  files: Record<string, string>
) {
  const {
    projectTypes,
    languageVersion,
    dependencies,
    osRequirements,
    environmentVariables,
    ports,
  } = analysis;
  let dockerfileContent = "";
  let additionalNotes = ""; // Local variable to collect notes
  const baseImages = {
    "Node.js": "node",
    Python: "python",
    Java: "openjdk",
    Ruby: "ruby",
    PHP: "php",
    Go: "golang",
    ".NET": "mcr.microsoft.com/dotnet/sdk",
    Rust: "rust",
    "Dart/Flutter": "cirrusci/flutter",
    Swift: "swift",
  };

  if (projectTypes.length === 1) {
    const projectType = projectTypes[0];
    switch (projectType) {
      case "Node.js":
        {
          // Extract the exact Node.js version
          let nodeVersion =
            languageVersion.replace("Node.js ", "").trim() || "latest";

          // Clean version string
          nodeVersion = nodeVersion.replace(/[^\d.]/g, "");
          if (!nodeVersion) {
            nodeVersion = "latest";
          }

          const baseImage = `${baseImages["Node.js"]}:${nodeVersion}-alpine`;

          dockerfileContent += `FROM ${baseImage}\n`;
          dockerfileContent += "WORKDIR /app\n";

          // Copy package.json and lock files
          dockerfileContent += "COPY package*.json ./\n";
          if (files["yarn.lock"]) {
            dockerfileContent += "COPY yarn.lock ./\n";
          } else if (files["package-lock.json"]) {
            dockerfileContent += "COPY package-lock.json ./\n";
          } else if (files["pnpm-lock.yaml"]) {
            dockerfileContent += "COPY pnpm-lock.yaml ./\n";
          }

          // Install dependencies using the exact versions from lock files
          if (files["yarn.lock"]) {
            dockerfileContent += "RUN yarn install --frozen-lockfile\n";
          } else if (files["pnpm-lock.yaml"]) {
            dockerfileContent +=
              "RUN npm install -g pnpm && pnpm install --frozen-lockfile\n";
          } else {
            dockerfileContent += "RUN npm ci\n";
          }

          dockerfileContent += "COPY . .\n";

          if (
            projectTypes.includes("React") ||
            projectTypes.includes("Next.js")
          ) {
            dockerfileContent += "\n# Build the frontend\n";
            if (files["yarn.lock"]) {
              dockerfileContent += "RUN yarn build\n";
            } else if (files["pnpm-lock.yaml"]) {
              dockerfileContent += "RUN pnpm run build\n";
            } else {
              dockerfileContent += "RUN npm run build\n";
            }
          }

          ports.forEach((port) => {
            dockerfileContent += `EXPOSE ${port}\n`;
          });

          if (projectTypes.includes("Next.js")) {
            dockerfileContent += 'CMD ["npm", "start"]\n';
          } else if (
            projectTypes.includes("React Native") ||
            projectTypes.includes("Expo")
          ) {
            additionalNotes +=
              "Building React Native and Expo apps requires additional setup and may not fully work in Docker.\n";
            dockerfileContent += 'CMD ["npm", "start"]\n';
          } else {
            dockerfileContent += 'CMD ["node", "index.js"]\n';
          }
        }
        break;

      case "Python":
        {
          // Extract the exact Python version
          let pythonVersion =
            languageVersion.replace("Python ", "").trim() || "latest";

          const baseImage = `${baseImages["Python"]}:${pythonVersion}-slim`;

          dockerfileContent += `FROM ${baseImage}\n`;
          dockerfileContent += "WORKDIR /app\n";

          if (files["requirements.txt"]) {
            dockerfileContent += "COPY requirements.txt ./\n";
            dockerfileContent +=
              "RUN pip install --no-cache-dir -r requirements.txt\n";
          } else if (files["Pipfile"]) {
            dockerfileContent += "COPY Pipfile* ./\n";
            dockerfileContent +=
              "RUN pip install pipenv && pipenv install --system --deploy\n";
          } else if (files["pyproject.toml"]) {
            dockerfileContent += "COPY pyproject.toml poetry.lock ./\n";
            dockerfileContent +=
              "RUN pip install poetry && poetry install --no-dev --no-interaction --no-ansi\n";
          }

          dockerfileContent += "COPY . .\n";

          ports.forEach((port) => {
            dockerfileContent += `EXPOSE ${port}\n`;
          });

          dockerfileContent += 'CMD ["python", "app.py"]\n';
        }
        break;

      case "Swift":
        {
          let swiftVersion =
            languageVersion.replace("Swift ", "").trim() || "latest";
          const baseImage = `${baseImages["Swift"]}:${swiftVersion}`;

          dockerfileContent += `FROM ${baseImage}\n`;
          dockerfileContent += "WORKDIR /app\n";

          if (files["Package.swift"]) {
            dockerfileContent += "COPY Package.swift ./\n";
            dockerfileContent += "RUN swift package resolve\n";
          }

          dockerfileContent += "COPY . .\n";

          dockerfileContent += 'CMD ["swift", "run"]\n';
        }
        break;

      case "Android":
        {
          const baseImage = "openjdk:8-jdk";

          dockerfileContent += `FROM ${baseImage}\n`;
          dockerfileContent += "WORKDIR /app\n";
          dockerfileContent += "# Install Android SDK\n";
          dockerfileContent +=
            "RUN apt-get update && apt-get install -y wget unzip && rm -rf /var/lib/apt/lists/*\n";
          dockerfileContent +=
            "RUN wget https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip -O commandlinetools.zip \\\n";
          dockerfileContent += "  && mkdir -p /android-sdk/cmdline-tools \\\n";
          dockerfileContent +=
            "  && unzip commandlinetools.zip -d /android-sdk/cmdline-tools \\\n";
          dockerfileContent += "  && rm commandlinetools.zip\n";
          dockerfileContent += "ENV ANDROID_HOME /android-sdk\n";
          dockerfileContent +=
            "ENV PATH $PATH:$ANDROID_HOME/cmdline-tools/tools/bin:$ANDROID_HOME/platform-tools\n";
          dockerfileContent += "RUN yes | sdkmanager --licenses\n";
          dockerfileContent +=
            'RUN sdkmanager "platform-tools" "platforms;android-28" "build-tools;28.0.3"\n';
          dockerfileContent += "COPY . .\n";
          dockerfileContent += "RUN ./gradlew build\n";
          additionalNotes +=
            "Note: Android projects require Android SDK and build tools.\n";
        }
        break;

      case "iOS":
        {
          additionalNotes +=
            "iOS projects require macOS to build and cannot be built in Docker containers on non-macOS hosts.\n";
        }
        break;

      default:
        additionalNotes += `No Dockerfile template available for project type: ${projectType}\n`;
        break;
    }
  } else {
    // Handle multiple project types
    additionalNotes +=
      "Multiple project types detected. Consider using Docker Compose or separate Dockerfiles for each service.\n";
  }

  return { dockerfileContent: dockerfileContent.trim(), additionalNotes };
}

export async function generateOutput(
  analysis: Awaited<ReturnType<typeof analyzeProject>>,
  dockerfileResult: ReturnType<typeof generateDockerfile>
) {
  const combinedNotes = [analysis.notes, dockerfileResult.additionalNotes]
    .filter(Boolean)
    .join("\n");

  console.log(dockerfileResult);
  return {
    projectType: analysis.projectTypes,
    languageVersion: analysis.languageVersion,
    dependencies: analysis.dependencies,
    dockerfile: dockerfileResult.dockerfileContent,
    osRequirements: analysis.osRequirements,
    ports: analysis.ports,
    environmentVariables: analysis.environmentVariables,
    notes: combinedNotes,
  };
}

================
File: app/api/claude-analyze/prompt.ts
================
export const prompt = `
### Instructions:

1. **Comprehensive Project Analysis**:
   - Examine all files and directories in the project to identify all programming languages, frameworks, libraries, and tools used.
   - Detect if the project uses multiple frameworks or languages (e.g., a Java Spring Boot backend with a React frontend or an Electron application combining Node.js and Chromium).
   - Avoid truncating any output after encountering "https://" or other URL-like patterns. Ensure that complete URLs and paths are maintained in their entirety.

2. **Configuration Files**:
   - Analyze build and configuration files like \`webpack.config.js\`, \`babel.config.js\`, \`tsconfig.json\`, \`Dockerfile\`, \`Makefile\`, \`android/app/build.gradle\`, \`ios/Podfile\`, and CI/CD pipelines.
   - Identify any platform-specific files or configurations.

3. **Dependency and Version Extraction**:
   - Extract all dependencies and their exact versions, including devDependencies and peerDependencies where applicable.
   - Avoid breaking long dependency URLs, paths, or configuration lines. Ensure that no part of a URL or path is cut off.

4. **Dockerfile Creation**:
   - Create a Dockerfile that replicates the necessary environment to build and run the application successfully.
   - Use multi-stage builds to optimize the final image size by separating build-time and runtime dependencies.
   - **Do not truncate** any long strings or URLs in the Dockerfile. Ensure that complete URLs (e.g., \`https://\`, \`wget https://\`) and file paths are maintained in full.

5. **Environment and External Dependencies**:
   - Identify all environment variables required by the application without exposing sensitive data.
   - Ensure no environment variable declarations or paths (e.g., for SDKs or tools) are broken or truncated.

6. **Structured JSON Output**:
   - Present all findings and the Dockerfile in the following JSON format:
   
     \`\`\`json
     {
       "projectType": ["Framework1", "Framework2"],
       "languageVersions": {
         "Language1": "Version",
         "Language2": "Version"
       },
       "dependencies": [
         "dependency1@version",
         "dependency2@version"
       ],
       "dockerfile": "this is where the Dockerfile content goes",
       "osRequirements": ["OS or Distribution", "System Packages"],
       "ports": [portNumber1, portNumber2],
       "environmentVariables": ["VARIABLE_NAME1", "VARIABLE_NAME2"],
       "notes": "Additional notes, recommendations, or special instructions."
     }
     \`\`\`

   - Ensure that the \`"dockerfile"\` field contains the full content of the Dockerfile, **without truncation**, especially after encountering URLs like \`https://\`.

7. **Validation and Error Checking**:
   - Check for conflicting dependencies or version mismatches.
   - Ensure that the Dockerfile commands correspond to the identified project types and dependencies.
   - Do not truncate any part of the output, including URLs, paths, and file names.

### Additional Considerations:
- **Multi-Service Applications**: If the project consists of multiple services, suggest using Docker Compose or Kubernetes for orchestrating multiple containers.
- **Platform-Specific Instructions**: Provide configurations needed to build and run mobile or desktop applications within a container, and ensure that no part of any path or command is truncated.

### Important Notes:
- **Accuracy and Completeness**: Ensure that each field is detailed and accurately reflects the project’s requirements. Avoid cutting off important sections of the response, such as URLs, paths, or configuration lines.
- **Security Best Practices**: Avoid copying sensitive files like \`.env\` into the Docker image.

---

**Updated Prompt:**

---

1. **Comprehensive Project Analysis**:

   - **Framework and Technology Identification**:
     - Examine all files and directories in the project to identify all programming languages, frameworks, libraries, and tools used.
     - Look into configuration and dependency files such as \`package.json\`, \`requirements.txt\`, \`go.mod\`, \`Pipfile\`, \`Gemfile\`, \`composer.json\`, \`Cargo.toml\`, \`pom.xml\`, \`build.gradle\`, \`pubspec.yaml\`, etc.
     - Detect if the project uses multiple frameworks or languages (e.g., a Java Spring Boot backend with a React frontend, or an Electron application combining Node.js and Chromium).

   - **Configuration Files**:
     - Analyze build and configuration files like \`webpack.config.js\`, \`babel.config.js\`, \`tsconfig.json\`, \`Dockerfile\`, \`Makefile\`, \`android/app/build.gradle\`, \`ios/Podfile\`, and CI/CD pipelines.
     - Note any scripts or commands in \`package.json\` scripts or equivalent that are essential for building or running the application.
     - Identify any platform-specific files or configurations (e.g., \`app.json\` for Expo, \`electron-builder.json\` for Electron).

2. **Dependency and Version Extraction**:

   - **List All Dependencies with Exact Versions**:
     - Extract all dependencies and their exact versions, including devDependencies and peerDependencies where applicable.
     - Include significant transitive dependencies if they impact the build or runtime.
     - Note any native modules or plugins that may require additional system dependencies or configurations.

   - **Programming Language and Runtime Versions**:
     - Identify the exact versions of programming languages and runtimes required (e.g., Node.js 14.17.0, Python 3.9.1, Java 11).
     - Check for version files like \`.nvmrc\`, \`.python-version\`, \`.ruby-version\`, or engines specified in \`package.json\` or \`build.gradle\`.

   - **System Requirements**:
     - Note any OS-specific requirements, necessary system packages, compiler tools, or SDKs needed (e.g., GCC, make, OpenSSL, Android SDK, iOS SDK).
     - Identify any requirements for GUI support or graphics libraries for desktop applications (e.g., Electron).

3. **Dockerfile Creation**:

   - **Generate an Accurate and Efficient Dockerfile**:
     - Create a Dockerfile that replicates the necessary environment to build and run the application successfully.
     - Use multi-stage builds to optimize the final image size by separating build-time and runtime dependencies.
     - Select appropriate base images that match the required language, OS versions, and platform-specific needs.
     - For multi-language projects, consider whether to use a single Dockerfile with multi-stage builds or separate Dockerfiles.

   - **Include Necessary Commands and Configurations**:
     - Install all required system packages, SDKs, emulators, and dependencies.
     - Configure the environment for GUI applications if necessary (e.g., setting up Xvfb for Electron apps).
     - Copy necessary files and set the correct working directories.
     - Specify build commands, if any (e.g., \`npm run build\`, \`gradle assemble\`, \`expo build\`).
     - Set up the entry point and command to run the application.
     - Expose necessary ports.

4. **Environment and External Dependencies**:

   - **Environment Variables**:
     - Identify all environment variables required by the application without exposing sensitive data.
     - Use placeholders or reference external configurations for secrets.
     - Provide guidance on how to supply these variables when running the container.

   - **External Services and APIs**:
     - Note any external services (e.g., databases, caching services, third-party APIs) the application interacts with.
     - Ensure necessary client libraries, network configurations, and environment variables are included.

5. **Optimization and Best Practices**:

   - **Security Measures**:
     - Run the application as a non-root user where possible.
     - Exclude unnecessary files and directories to minimize the image size.
     - Do not copy sensitive files like \`.env\` into the image.
     - Use trusted base images and verify checksums when downloading dependencies.

   - **Performance Enhancements**:
     - Implement caching for dependency installation steps to speed up builds.
     - Use lightweight base images (e.g., Alpine variants) when appropriate, but ensure compatibility with required dependencies.

6. **Output Requirements**:

   - **Structured JSON Output**:
     - Present all findings and the Dockerfile in the following JSON format:


     {
       "projectType": ["Framework1", "Framework2"],
       "languageVersions": {
         "Language1": "Version",
         "Language2": "Version",
       },
       "dependencies": [
         "dependency1@version",
         "dependency2@version",
       ],
       "dockerfile": "this is where the docker document content goes",
       "osRequirements": ["OS or Distribution", "System Packages"],
       "ports": [portNumber1, portNumber2],
       "environmentVariables": ["VARIABLE_NAME1", "VARIABLE_NAME2"],
       "notes": "Additional notes, recommendations, or special instructions."
     }
     

   - **Comprehensive and Accurate Content**:
     - Ensure that each field is detailed and accurately reflects the project's requirements.
     - The \`"dockerfile"\` field should contain the full content of the Dockerfile, properly formatted.
     - For multi-service applications, provide Dockerfiles for each service if applicable.

7. **Validation and Error Checking**:

   - **Consistency Verification**:
     - Cross-verify that all versions and dependencies are consistent throughout the output.
     - Check for conflicting dependencies or version mismatches.
     - Ensure that the Dockerfile commands correspond to the identified project types and dependencies.

   - **Build Simulation**:
     - Consider the build process steps to identify potential issues.
     - Adjust the Dockerfile to resolve any anticipated errors.
     - Provide suggestions if certain components cannot be containerized easily (e.g., GUI applications).

8. **Additional Considerations**:

   - **Multi-Service Applications**:
     - If the project consists of multiple services (e.g., microservices architecture, separate frontend and backend), generate Dockerfiles for each service or provide guidance on using tools like Docker Compose.
     - Suggest appropriate service definitions and networking configurations.

   - **Platform-Specific Instructions**:
     - For applications targeting specific platforms (e.g., mobile, desktop), include necessary build tools, SDKs, or emulators.
     - Provide configurations needed to build and run the application within a container, acknowledging any limitations (e.g., hardware acceleration for mobile emulators).

   - **CI/CD Integration**:
     - Suggest ways to integrate the Dockerfile into CI/CD pipelines for automated builds and deployments.
     - Provide examples of how to build and push Docker images within popular CI/CD systems.
     - Mention any testing steps that should be included in the CI/CD pipeline.

---

### **Important Notes:**

- **Accuracy and Completeness**:
  - **Detailed Analysis**: Perform an exhaustive analysis to capture all aspects of the project, including less common frameworks or tools.
  - **Exact Versions**: Use precise versions for all languages, frameworks, and dependencies to prevent compatibility issues.
  - **Edge Cases**: Address potential challenges with containerizing certain applications (e.g., GUI applications, applications requiring specific hardware access).

- **Security Best Practices**:
  - **Sensitive Data Handling**: Do not include actual secret keys, passwords, or any sensitive information in the output.
  - **User Permissions**: Configure the Dockerfile to avoid running the application as the root user when possible.
  - **Trusted Sources**: Ensure all base images and downloaded dependencies come from trusted sources.

- **Optimizations**:
  - **Layer Caching**: Organize Dockerfile commands to leverage layer caching, placing commands that change less frequently earlier.
  - **Image Size**: Use slim or alpine base images to reduce the final image size, unless the application requires standard images.

- **Testing and Validation**:
  - **Build Testing**: Encourage testing the Docker image locally to ensure it builds and runs as expected before deployment.
  - **Continuous Integration**: Recommend incorporating the Docker build into a CI pipeline for ongoing validation.
  - **Automated Tests**: Suggest running automated tests within the Docker container as part of the build process.

- **Documentation**:
  - **Comments in Dockerfile**: Include comments within the Dockerfile to explain non-obvious instructions.
  - **Readme Updates**: Suggest updating project documentation to reflect Docker usage and any changes made.
  - **Usage Instructions**: Provide guidance on how to run the Docker container, including any necessary environment variables or setup steps.

---

NOTE< --- THERE SHOULD BE NOOOOOO COMMENTS IN THE JSON THATS RETURNED WHAT SO EVER

**Note**: Please ensure that no part of the output, especially URLs or paths, is truncated at any point.


`;

================
File: app/api/claude-analyze/route.ts
================
// app/api/claude-analyze/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import Anthropic from "@anthropic-ai/sdk";
import { createClient } from "@/lib/supabase/supabase-server";
import fs from "fs";
import { prompt } from "./prompt";

import { promisify } from "util";

const readFile = promisify(fs.readFile);

const anthropic = new Anthropic({
  apiKey: process.env.NEXT_PUBLIC_CLAUDE_API_KEY,
});

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

// Function to remove comments from JSON-like string
const removeComments = (jsonString: string) => {
  // Remove single-line (//) and multi-line (/* */) comments
  return jsonString
    .replace(/\/\/.*$/gm, "")
    .replace(/\/\*[\s\S]*?\*\//g, "")
    .trim();
};

export async function POST(request: NextRequest) {
  const { outputFilePath } = await request.json();

  const supabase = createClient();

  try {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const fileContents = await readFile(outputFilePath, "utf-8");

    const msg = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20240620",
      max_tokens: 8192,
      temperature: 0,
      system: prompt,
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Analyze the following codebase information:\n\n${fileContents}`,
            },
          ],
        },
      ],
    });

    /*
    const assistant = await openai.beta.assistants.create({
      name: "Code analyzer",
      instructions: prompt,
      model: "gpt-4o",
      temperature: 0.2,
      top_p: 0.95,
    });

    const fileUpload = await openai.files.create({
      file: fs.createReadStream(outputFilePath),
      purpose: "assistants",
    });

    const thread = await openai.beta.threads.create({
      messages: [
        {
          role: "user",
          content: prompt,
          attachments: [
            { file_id: fileUpload.id, tools: [{ type: "file_search" }] },
          ],
        },
      ],
    });

    const run = await openai.beta.threads.runs.createAndPoll(thread.id, {
      assistant_id: assistant.id,
    });

    const messages = await openai.beta.threads.messages.list(thread.id, {
      run_id: run.id,
    });

    const message = messages.data.pop();
    let responseContent = "";

    if (message && message.content[0].type === "text") {
      const { text } = message.content[0];
      responseContent = text.value;

      // Remove code blocks
      responseContent = responseContent.replace(/```json([\s\S]*?)```/g, "$1");
      responseContent = responseContent.replace(/```([\s\S]*?)```/g, "$1");

      // Remove comments from the JSON
      responseContent = removeComments(responseContent);

      // Extract JSON content
      const jsonStartIndex = responseContent.indexOf("{");
      const jsonEndIndex = responseContent.lastIndexOf("}");
      if (jsonStartIndex !== -1 && jsonEndIndex !== -1) {
        responseContent = responseContent.slice(
          jsonStartIndex,
          jsonEndIndex + 1
        );
      } else {
        throw new Error("No valid JSON object found in the response.");
      }

      // Parse the JSON content
      let analysisData;
      try {
        analysisData = JSON.parse(responseContent);
      } catch (parseError) {
        console.error("JSON parsing error:", parseError);
        console.error("Response content:", responseContent);
        throw new Error("Failed to parse JSON response from assistant.");
      }
          */

    let analysisData;
    if (msg.content[0].type === "text") {
      const responseContent = msg.content[0].text;
      console.log("Claude's response:", responseContent);

      // Function to find and parse the first valid JSON object in the string
      const findAndParseJSON = (str) => {
        const regex = /\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\}/g;
        const matches = str.match(regex);
        if (matches) {
          for (const match of matches) {
            try {
              return JSON.parse(match);
            } catch (e) {
              console.log("Failed to parse JSON:", match);
              // Continue to the next match if parsing fails
            }
          }
        }
        throw new Error("No valid JSON object found in the response.");
      };

      try {
        analysisData = findAndParseJSON(responseContent);
        console.log("Parsed analysis data:", analysisData);
      } catch (parseError) {
        console.error("JSON parsing error:", parseError);
        console.error("Response content:", responseContent);
        throw new Error("Failed to parse JSON response from Claude.");
      }
    } else {
      throw new Error("Unexpected content type in Claude's response.");
    }

    return NextResponse.json(analysisData);
  } catch (error) {
    console.error("Error in analysis:", error);
    return NextResponse.json(
      { error: "Failed to analyze repository" },
      { status: 500 }
    );
  }
}

================
File: app/api/claude-analyze/route3.ts
================
// app/api/claude-analyze/route.ts
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/supabase-server";
import {
  readRepopack,
  analyzeProject,
  generateDockerfile,
  generateOutput,
} from "./analyzer";

export async function POST(request: NextRequest) {
  const { outputFilePath, repoDir } = await request.json();

  const supabase = createClient();

  try {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { data: workspaceData, error: workspaceError } = await supabase
      .from("workspaces")
      .select("github_app_installation_id")
      .single();

    if (workspaceError || !workspaceData?.github_app_installation_id) {
      return NextResponse.json(
        { error: "No GitHub installation found" },
        { status: 400 }
      );
    }

    // Use the script to analyze the repository
    const files = await readRepopack(outputFilePath);

    if (Object.keys(files).length === 0) {
      return NextResponse.json(
        {
          error:
            "No files were parsed from repopack.txt. Please check the file format.",
        },
        { status: 400 }
      );
    }

    const analysis = await analyzeProject(files);
    const dockerfileResult = generateDockerfile(analysis, files);
    const output = await generateOutput(analysis, dockerfileResult);

    return NextResponse.json(output);
  } catch (error) {
    console.error("Error in analysis:", error);
    return NextResponse.json(
      { error: "Failed to analyze repository" },
      { status: 500 }
    );
  }
}

================
File: app/api/claude-analyze/TEST.MD
================
FROM node:14.17.0-alpine AS build
WORKDIR /app

# Install dependencies

COPY package.json yarn.lock ./
RUN yarn install

# Install expo-cli

RUN yarn global add expo-cli

# Copy the project files

COPY . .

# Install Android SDK

FROM openjdk:8-jdk-alpine AS android-sdk
RUN mkdir -p /sdk && \n wget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O /sdk/tools.zip && \n unzip /sdk/tools.zip -d /sdk && \n rm /sdk/tools.zip

# Install Gradle

FROM gradle:6.3-jdk8-alpine AS build-android
COPY --from=android-sdk /sdk /sdk
ENV ANDROID_HOME=/sdk
ENV PATH=$PATH:/sdk/tools:/sdk/tools/bin:/sdk/platform-tools

# Build the Android project

WORKDIR /app/android
COPY android .
RUN gradle build

# Install dependencies for iOS

FROM ruby:2.7.1-alpine AS build-ios
RUN apk add --no-cache bash git openssh make curl
RUN gem install cocoapods

# Copy dependencies

WORKDIR /app/ios
COPY ios .

# Install Pods

RUN pod install

# Final stage

FROM node:14.17.0-alpine AS runtime

# Copy Node.js dependencies and Expo project

WORKDIR /app
COPY --from=build /app .

# Set environment variables

ENV NODE_ENV production

# Expose port

EXPOSE 19000

CMD ["yarn", "start"]

================
File: app/api/claude-analyze/test.ts
================
// app/api/claude-analyze/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import Anthropic from "@anthropic-ai/sdk";
import { createClient } from "@/lib/supabase/supabase-server";
import { githubApp } from "@/lib/github";
import fs from "fs";

const anthropic = new Anthropic({
  apiKey: process.env.NEXT_PUBLIC_CLAUDE_API_KEY,
});

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

import OpenAI from "openai";
const openai = new OpenAI();

main();

export async function POST(request: NextRequest) {
  const { repopackOutput } = await request.json();

  const supabase = createClient();

  try {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Fetch the installation ID for the current user's organization
    const { data: workspaceData, error: workspaceError } = await supabase
      .from("workspaces")
      .select("github_app_installation_id")
      .single();

    if (workspaceError || !workspaceData?.github_app_installation_id) {
      return NextResponse.json(
        { error: "No GitHub installation found" },
        { status: 400 }
      );
    }

    const installationId = workspaceData.github_app_installation_id;

    // Get an Octokit instance for this installation
    const octokit = await githubApp.getInstallationOctokit(
      Number(installationId)
    );

    // Fetch repository data using Octokit

    const prompt = `${repopackOutput}`;
    /*
    const message = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20240620",
      max_tokens: 1000,
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
    });
    */

    const assistant = await openai.beta.assistants.create({
      name: "Code analyzer",
      instructions:
        "I want you to analyze this project carefully and create a docker file that can be used to deploy this application in a workspaces environment,",

      model: "gpt-4o",
      tools: [{ type: "file_search" }],
    });
    let vectorStore = await openai.beta.vectorStores.create({
      name: "Repository",
    });

    await openai.beta.vectorStores.fileBatches.uploadAndPoll(
      vectorStore.id,
      fs.createReadStream("/fs")
    );

    await openai.beta.assistants.update(assistant.id, {
      tool_resources: { file_search: { vector_store_ids: [vectorStore.id] } },
    });

    const aapl10k = await openai.files.create({
      file: fs.createReadStream("edgar/aapl-10k.pdf"),
      purpose: "assistants",
    });

    const thread = await openai.beta.threads.create({
      messages: [
        {
          role: "user",
          content: "Analyze the file",
          // Attach the new file to the message.
          attachments: [
            { file_id: aapl10k.id, tools: [{ type: "file_search" }] },
          ],
        },
      ],
    });

    const run = await openai.beta.threads.runs.createAndPoll(thread.id, {
      assistant_id: assistant.id,
    });

    const messages = await openai.beta.threads.messages.list(thread.id, {
      run_id: run.id,
    });

    const message = messages.data.pop()!;
    if (message.content[0].type === "text") {
      const { text } = message.content[0];
      const { annotations } = text;
      const citations: string[] = [];

      let index = 0;
      for (let annotation of annotations) {
        text.value = text.value.replace(annotation.text, "[" + index + "]");
        const { file_citation } = annotation;
        if (file_citation) {
          const citedFile = await openai.files.retrieve(file_citation.file_id);
          citations.push("[" + index + "]" + citedFile.filename);
        }
        index++;
      }

      console.log(text.value);
      console.log(citations.join("\n"));
    }
    const analysis = text?.value;

    return NextResponse.json(analysis);
  } catch (error) {
    console.error("Error in Claude analysis:", error);
    return NextResponse.json(
      { error: "Failed to analyze repository" },
      { status: 500 }
    );
  }
  f;
}

================
File: app/api/clone-repository/route.ts
================
// app/api/clone-repository/route.ts
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/supabase-server";
import { githubApp } from "@/lib/github";
import fs from "fs/promises";
import path from "path";
import { simpleGit } from "simple-git";

export async function POST(request: NextRequest) {
  const { repoFullName } = await request.json();
  const supabase = createClient();

  try {
    // Authenticate the user
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Fetch the installation ID for the current user's organization
    const { data: workspaceData, error: workspaceError } = await supabase
      .from("workspaces")
      .select("github_app_installation_id")
      .single();

    if (workspaceError || !workspaceData?.github_app_installation_id) {
      return NextResponse.json(
        { error: "No GitHub installation found" },
        { status: 400 }
      );
    }

    const installationId = workspaceData.github_app_installation_id;

    // Get an Octokit instance for this installation
    const octokit = await githubApp.getInstallationOctokit(
      Number(installationId)
    );

    // Get repository details
    const [owner, repo] = repoFullName.split("/");
    const { data: repoData } = await octokit.rest.repos.get({ owner, repo });

    // Create a unique directory name
    const uniqueDirName = `${owner}-${repo}-${Date.now()}`;
    const repoDir = path.join(process.cwd(), "tmp", uniqueDirName);

    // Ensure the directory doesn't exist, then clone
    await fs.rm(repoDir, { recursive: true, force: true });
    await fs.mkdir(repoDir, { recursive: true });
    await simpleGit().clone(repoData.clone_url, repoDir);

    // Return the repository directory path
    return NextResponse.json({ repoDir });
  } catch (error) {
    console.error("Error cloning repository:", error);
    return NextResponse.json(
      {
        error: "Failed to clone repository",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}

================
File: app/api/create-workspace/route.ts
================
// File: app/api/create-workspace/route.ts
import { NextRequest, NextResponse } from 'next/server';
import axios from 'axios';
import { createClient } from '@supabase/supabase-js';
import { createAppAuth } from '@octokit/auth-app';

const GITHUB_APP_ID = process.env.NEXT_PUBLIC_GITHUB_APP_ID;
const GITHUB_PRIVATE_KEY = process.env.GITHUB_PRIVATE_KEY;
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

export async function POST(request: NextRequest) {
  const { repo_name } = await request.json();

  try {
    // Get the installation ID for the repository
    const [owner, repo] = repo_name.split('/');
    const installationResponse = await axios.get(`https://api.github.com/repos/${owner}/${repo}/installation`, {
      headers: {
        Authorization: `Bearer ${await getJWT()}`,
        Accept: 'application/vnd.github.v3+json',
      },
    });

    const installationId = installationResponse.data.id;

    // Get an installation access token
    const auth = createAppAuth({
      appId: GITHUB_APP_ID,
      privateKey: GITHUB_PRIVATE_KEY,
      installationId,
    });

    const { token } = await auth({ type: "installation" });

    // Fetch repository details from GitHub
    const repoResponse = await axios.get(`https://api.github.com/repos/${repo_name}`, {
      headers: { 
        Authorization: `Bearer ${token}`,
        Accept: 'application/vnd.github.v3+json',
      },
    });

    const repoData = repoResponse.data;

    // Create a new workspace in your database
    const { data, error } = await supabase
      .from('workspaces')
      .insert({
        name: repoData.name,
        github_repo_id: repoData.id,
        github_repo_url: repoData.html_url,
        description: repoData.description,
        installation_id: installationId,
        // Add any other relevant fields
      });

    if (error) throw error;

    return NextResponse.json({ success: true, workspace: data });
  } catch (error) {
    console.error('Error creating workspace:', error);
    return NextResponse.json({ success: false, error: 'Failed to create workspace' }, { status: 500 });
  }
}

async function getJWT() {
  const auth = createAppAuth({
    appId: GITHUB_APP_ID,
    privateKey: GITHUB_PRIVATE_KEY,
  });

  const { token } = await auth({ type: "app" });
  return token;
}

================
File: app/api/github-app-install/route.ts
================
import { NextResponse } from 'next/server';

const GITHUB_APP_NAME = process.env.NEXT_PUBLIC_GITHUB_APP_NAME;

import { App } from "octokit";

export async function GET() {
  const installUrl = `https://github.com/apps/${GITHUB_APP_NAME}/installations/new`
  return NextResponse.json({ installUrl });
}

================
File: app/api/github-callback/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { githubApp } from "@/lib/github";
import { createClient } from "@/lib/supabase/supabase-server";

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const installation_id = searchParams.get("installation_id");
  const setup_action = searchParams.get("setup_action");

  if (installation_id && setup_action === "install") {
    try {
      const octokit = await githubApp.getInstallationOctokit(
        Number(installation_id)
      );

      // Fetch the installation details
      const { data: installationData } =
        await octokit.rest.apps.getInstallation({
          installation_id: Number(installation_id),
        });

      // Fetch the organization details to get the org ID
      const { data: orgData } = await octokit.rest.orgs.get({
        org: installationData?.account?.login,
      });

      const supabase = createClient();
      // First, get the current user
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError || !user) {
        console.error("User error:", userError);
        throw new Error("Unable to get current user.");
      }

      // Then, fetch the user's workspace
      const { data: workspace, error: workspaceError } = await supabase
        .from("workspaces")
        .select("id, name")
        .eq("user_id", user.id)
        .single();

      if (workspaceError) {
        console.error("Workspace error:", workspaceError);
        throw new Error("Unable to fetch user's workspace.");
      }

      // Update the workspace with GitHub installation data
      const { error: updateError } = await supabase
        .from("workspaces")
        .update({
          github_org_name: installationData?.account?.login,
          github_org_id: orgData.id,
          github_app_installation_id: installation_id,
        })
        .eq("id", workspace.id);

      console.log(updateError);
      console.log("TESFDSDS");
      if (updateError) {
        console.error("Update error:", updateError);
        throw new Error("Failed to update workspace with GitHub data.");
      }

      // Return an HTML page that will communicate with the opener and then close itself
      return new NextResponse(
        `
        <html>
          <body>
            <script>
              if (window.opener) {
                window.opener.postMessage({
                  type: 'github-installation-success',
                  installationId: '${installation_id}',
                  orgName: '${installationData?.account?.login}',
                  orgId: '${orgData.id}'
                }, '*');
                window.close();
              }
            </script>
          </body>
        </html>
      `,
        {
          headers: { "Content-Type": "text/html" },
        }
      );
    } catch (error) {
      console.error("Error processing GitHub callback:", error);
      return NextResponse.json(
        { error: "Failed to process GitHub installation" },
        { status: 500 }
      );
    }
  }

  // Handle other cases or errors
  return NextResponse.json({ error: "Invalid callback" }, { status: 400 });
}

================
File: app/api/github-repositories/route.ts
================
// app/api/github/repositories/route.ts
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/supabase-server";
import { githubApp } from "@/lib/github";

export async function GET(request: NextRequest) {
  const supabase = createClient();

  try {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Get the workspace data
    const { data: workspaceData, error: workspaceError } = await supabase
      .from("workspaces")
      .select("id, github_app_installation_id")
      .single();

    if (workspaceError || !workspaceData?.github_app_installation_id) {
      return NextResponse.json(
        { error: "GitHub is not connected." },
        { status: 400 }
      );
    }

    const installationId = Number(workspaceData.github_app_installation_id);
    const octokit = await githubApp.getInstallationOctokit(installationId);

    // Fetch repositories
    const repositories = [];

    let page = 1;
    let hasNextPage = true;

    while (hasNextPage) {
      const { data } =
        await octokit.rest.apps.listReposAccessibleToInstallation({
          per_page: 100,
          page,
        });

      repositories.push(...data.repositories);

      if (data.total_count > repositories.length) {
        page += 1;
      } else {
        hasNextPage = false;
      }
    }

    return NextResponse.json({ repositories });
  } catch (error) {
    console.error("Error fetching repositories:", error);
    return NextResponse.json(
      { error: "Failed to fetch repositories." },
      { status: 500 }
    );
  }
}

================
File: app/api/process-repository/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/supabase-server";
import { exec } from "child_process";
import { promisify } from "util";
import path from "path";
import fs from "fs";

const execAsync = promisify(exec);

export async function POST(request: NextRequest) {
  const { repoDir } = await request.json();
  const supabase = createClient();

  try {
    // Authenticate the user
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Define the output file path
    const outputFilePath = path.join(repoDir, "repopack-output.txt");

    // Define ignore patterns
    const includePatterns = `
package.json,yarn.lock,pnpm-lock.yaml,.babelrc,tsconfig.json,metro.config.js,app.json,expo.json,android/app/build.gradle,ios/Podfile,index.js,App.js,requirements.txt,Pipfile,pyproject.toml,tox.ini,setup.py,wsgi.py,go.mod,go.sum,Cargo.toml,Cargo.lock,composer.json,composer.lock,build.gradle,settings.gradle,pom.xml,mvnw,mvnw.cmd,.mvn/wrapper/maven-wrapper.properties,src/main/resources/application.yml,src/main/resources/application.properties,src/main/resources/logback.xml,Dockerfile,docker-compose.yml,.dockerignore,.env,.env.production,.env.development,.env.local,.env.test,.gitlab-ci.yml,.travis.yml,circle.yml,Jenkinsfile,.github/workflows/*.yml,terraform.tf,terraform.tfvars,terragrunt.hcl,cloudformation.yml,cloudformation.json,nx.json,lerna.json,next.config.js,gatsby-config.js,vue.config.js,nuxt.config.js,angular.json,capacitor.config.json,Makefile,CMakeLists.txt,webpack.config.js,rollup.config.js,vite.config.js
`;

    await execAsync(`npx repopack --include "${includePatterns}"`, {
      cwd: repoDir,
    });

    // Run repopack and capture the output
    await execAsync(`npx repopack --include "${includePatterns}"`, {
      cwd: repoDir,
    });

    // Write stdout to the output file
    //fs.writeFileSync(outputFilePath, stdout);

    // Return the file path and other data to be processed
    return NextResponse.json({ outputFilePath, repoDir });
  } catch (error) {
    console.error("Error processing repository:", error);
    return NextResponse.json(
      {
        error: "Failed to process repository",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}

================
File: app/auth/callback/route.ts
================
import { NextResponse } from "next/server";
// The client you created from the Server-Side Auth instructions
import { createClient } from "@/lib/supabase/supabase-server";

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get("code");
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get("next") ?? "/";

  const supabase = createClient();
  if (code) {
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      const forwardedHost = request.headers.get("x-forwarded-host"); // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === "development";
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`);
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`);
      } else {
        return NextResponse.redirect(`${origin}${next}`);
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`);
}

================
File: app/auth/confirm/route.ts
================
import { type EmailOtpType } from "@supabase/supabase-js";
import { cookies } from "next/headers";
import { NextRequest, NextResponse } from "next/server";
// The client you created from the Server-Side Auth instructions
import { createClient } from "@/lib/supabase/supabase-server";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token_hash = searchParams.get("token_hash");
  const type = searchParams.get("type") as EmailOtpType | null;
  const next = searchParams.get("next") ?? "/";
  const redirectTo = request.nextUrl.clone();
  redirectTo.pathname = next;

  if (token_hash && type) {
    const supabase = createClient();

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    });
    if (!error) {
      return NextResponse.redirect(redirectTo);
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = "/auth/auth-code-error";
  return NextResponse.redirect(redirectTo);
}

================
File: app/contexts/NotificationContext.tsx
================
import React, { createContext, useState, useContext } from "react";
import Notification from "@/_common/components/Notification";

// Define the shape of a notification
type NotificationData = {
  type: "success" | "info" | "warning" | "error";
  title: string;
  message: string;
};

type NotificationContextValue = {
  showNotification: (notification: NotificationData) => void;
};

const NotificationContext = createContext<NotificationContextValue | null>(
  null
);

export const NotificationProvider: React.FC = ({ children }) => {
  const [notifications, setNotifications] = useState<NotificationData[]>([]);

  const showNotification = (notification: NotificationData) => {
    setNotifications((prevNotifications) => [
      ...prevNotifications,
      notification,
    ]);
  };

  const removeNotification = (index: number) => {
    setNotifications((prevNotifications) =>
      prevNotifications.filter((_, i) => i !== index)
    );
  };

  return (
    <NotificationContext.Provider value={{ showNotification }}>
      {children}
      {/* Render notifications globally */}
      {notifications.map((notification, index) => (
        <Notification
          key={index}
          type={notification.type}
          title={notification.title}
          message={notification.message}
          onClose={() => removeNotification(index)}
        />
      ))}
    </NotificationContext.Provider>
  );
};

// Custom hook to use the Notification context
export const useNotificationContext = () => {
  const context = useContext(NotificationContext);
  if (context === null) {
    throw new Error(
      "useNotificationContext must be used within a NotificationProvider"
    );
  }
  return context;
};

================
File: app/contexts/WebSocketContext.tsx
================
import React, { createContext, useContext, useEffect, useState } from "react";
import io from "socket.io-client";
import { useNotificationContext } from "./NotificationContext";
import { createClient } from "@/lib/supabase/supabase-client";

type WebSocketContextValue = {
  message: any;
  ws: WebSocket | null;
};

const WebSocketContext = createContext<WebSocketContextValue | null>(null);

export const WebSocketProvider: React.FC = ({ children }) => {
  const [message, setMessage] = useState<any>(null);
  const [ws, setWs] = useState<WebSocket | null>(null);
  const { showNotification } = useNotificationContext();
  const supabase = createClient();

  useEffect(() => {
    const socketConnection = io("http://localhost:3001");

    socketConnection.on("github_webhook", handleGithubWebhook);
    socketConnection.on("disconnect", handleDisconnect);

    setWs(socketConnection);

    // Cleanup when component unmounts
    return () => {
      socketConnection.disconnect();
    };
  }, []);

  /**
   * Handles incoming GitHub webhook events and updates the database
   */
  const handleGithubWebhook = async (data: any) => {
    const { event, action, installationId, githubOrgName, githubOrgId } = data;

    try {
      if (event === "installation" && action === "created") {
        await updateWorkspace(installationId, githubOrgName, githubOrgId);
        showNotification({
          type: "success",
          title: "GitHub Connected",
          message: "GitHub installation was added and workspace updated.",
        });
      } else if (event === "installation" && action === "deleted") {
        await clearWorkspaceInstallation(installationId);
        showNotification({
          type: "warning",
          title: "GitHub Disconnected",
          message: "GitHub installation was removed and database updated.",
        });
      }
    } catch (err) {
      handleUpdateError(err, action);
    }

    setMessage(data); // Store the message in state
  };

  /**
   * Handles WebSocket disconnection event
   */
  const handleDisconnect = () => {
    console.log("Disconnected from WebSocket server");
  };

  /**
   * Updates the workspace with the new GitHub installation details
   */
  const updateWorkspace = async (
    installationId: string,
    githubOrgName: string,
    githubOrgId: string
  ) => {
    const { error } = await supabase
      .from("workspaces")
      .update({
        github_app_installation_id: installationId,
        github_org_name: githubOrgName,
        github_org_id: githubOrgId,
      })
      .eq("github_app_installation_id", installationId);

    if (error) {
      throw new Error(`Error updating workspace: ${error.message}`);
    }
  };

  /**
   * Clears the GitHub installation details from the workspace in the database
   */
  const clearWorkspaceInstallation = async (installationId: string) => {
    const { error } = await supabase
      .from("workspaces")
      .update({
        github_app_installation_id: null,
        github_org_name: null,
        github_org_id: null,
      })
      .eq("github_app_installation_id", installationId);

    if (error) {
      throw new Error(
        `Error clearing workspace installation: ${error.message}`
      );
    }
  };

  /**
   * Handles errors encountered when updating the workspace
   */
  const handleUpdateError = (err: Error, action: string) => {
    console.error(
      `Failed to update workspace after installation ${action}:`,
      err
    );
    showNotification({
      type: "error",
      title: action === "created" ? "Workspace Update Failed" : "Update Failed",
      message: `Failed to update workspace after GitHub installation ${action}.`,
    });
  };

  return (
    <WebSocketContext.Provider value={{ message, ws }}>
      {children}
    </WebSocketContext.Provider>
  );
};

export const useWebSocketContext = () => {
  const context = useContext(WebSocketContext);
  if (context === null) {
    throw new Error(
      "useWebSocketContext must be used within a WebSocketProvider"
    );
  }
  return context;
};

================
File: app/hooks/useAuth.tsx
================
"use client";
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/supabase-client";

const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getUser = async () => {
      const { data, error } = await supabase.auth.getUser();

      if (data) {
        setUser(data.user);
      }
      setLoading(false);
    };

    getUser();
  }, []);

  return { user, loading };
};

export default useAuth;

================
File: app/hooks/useClaudeAnalysis.tsx
================
import { useMutation } from "@tanstack/react-query";
import axios from "axios";

interface AnalysisInput {
  repoDir: string;
  outputFilePath: string;
}

interface AnalysisResponse {
  dockerfile: string;
  dependencies: string[];
  projectType: string;
  notes: string;

  // Add other properties if they exist in the response
}

export function useClaudeAnalysis() {
  const analysisMutation = useMutation<string, Error, AnalysisInput>({
    mutationFn: async ({ repoDir, outputFilePath }) => {
      const response = await axios.post<AnalysisResponse>(
        "/api/claude-analyze",
        {
          repoDir,
          outputFilePath,
        }
      );

      if (response.data) {
        return response.data;
      } else {
        throw new Error("Invalid response format from AI API");
      }
    },
    onError: (error) => {
      console.error("Error in AI analysis:", error);
    },
  });

  const analyzeRepository = (repoDir: string, outputFilePath: string) => {
    return analysisMutation.mutateAsync({ repoDir, outputFilePath });
  };

  return {
    analyzeRepository,
    isAnalyzing: analysisMutation.isPending,
    error: analysisMutation.error,
  };
}

================
File: app/hooks/useData.tsx
================
// hooks/useIntraData.ts

import { useQuery } from "@tanstack/react-query";
import { createClient } from "@/lib/supabase/supabase-client";
import { useNotificationContext } from "@/contexts/NotificationContext";

interface User {
  id: string;
  email: string;
  name: string;
  // Add other user properties as needed
}

interface Workspace {
  id: string;
  name: string;
  // Add other workspace properties as needed
}

const supabase = createClient();

export function useUser() {
  const { showNotification } = useNotificationContext();

  return useQuery({
    queryKey: ["user"],
    queryFn: async () => {
      const {
        data: { user },
        error,
      } = await supabase.auth.getUser();
      if (error) throw error;
      return user as User;
    },
    onError: (error) => {
      showNotification({
        type: "error",
        title: "User Data Error",
        message: error.message,
      });
    },
    staleTime: 0,
    gcTime: 0, // 5 minutes
  });
}

export function useWorkspace() {
  const { showNotification } = useNotificationContext();
  const { data: user } = useUser();

  return useQuery({
    queryKey: ["workspace"],
    queryFn: async () => {
      if (!user) throw new Error("User not found");
      const { data, error } = await supabase
        .from("workspaces")
        .select("*")
        .eq("user_id", user.id)
        .single();
      if (error) throw error;
      return data as Workspace;
    },
    enabled: !!user,
    onError: (error) => {
      showNotification({
        type: "error",
        title: "Workspace Data Error",
        message: error.message,
      });
    },
    staleTime: 0,
    gcTime: 0, // 5 minutes
  });
}

export function useIntraData() {
  const userQuery = useUser();
  const workspaceQuery = useWorkspace();

  return {
    user: userQuery.data,
    workspace: workspaceQuery.data,
    isLoading: userQuery.isLoading || workspaceQuery.isLoading,
    isPending: userQuery.isPending || workspaceQuery.isPending,
    error: userQuery.error || workspaceQuery.error,
    refetchUser: userQuery.refetch,
    refetchWorkspace: workspaceQuery.refetch,
  };
}

================
File: app/hooks/useGitHubIntegration.tsx
================
"use client";

import { useQuery } from "@tanstack/react-query";
import { createClient } from "@/lib/supabase/supabase-client";
import { githubApp } from "@/lib/github";
import { useNotificationContext } from "@/contexts/NotificationContext";
import { RequestError } from "@octokit/request-error";
import { useIntraData } from "./useData";
import { useState, useEffect } from "react";

export function useGitHubIntegration() {
  const supabase = createClient();
  const { showNotification } = useNotificationContext();
  const { workspace } = useIntraData();
  const [isImmediateLoading, setIsImmediateLoading] = useState(true);

  const {
    data: installationData,
    isPending,
    error,
    refetch: refetchInstallation,
  } = useQuery({
    queryKey: ["githubInstallation", workspace?.id],
    queryFn: async () => {
      // No need to check for !workspace here since the query won't run if enabled is false
      const { data: workspaceData, error } = await supabase
        .from("workspaces")
        .select(
          "id, github_app_installation_id, github_org_name, github_org_id"
        )
        .eq("id", workspace.id)
        .single();

      if (error) {
        throw new Error("Failed to fetch workspace data.");
      }

      if (!workspaceData.github_app_installation_id) {
        return {
          isConnected: false,
          githubOrgName: null,
          installationId: null,
        };
      }

      const octokit = await githubApp.getInstallationOctokit(
        Number(workspaceData.github_app_installation_id)
      );

      try {
        await octokit.rest.apps.getInstallation({
          installation_id: Number(workspaceData.github_app_installation_id),
        });

        return {
          isConnected: true,
          githubOrgName: workspaceData.github_org_name,
          installationId: workspaceData.github_app_installation_id,
        };
      } catch (err) {
        throw new Error("An error occurred while checking GitHub integration.");
      }
    },
    staleTime: 0,
    gcTime: 0,
    enabled: !!workspace, // The query will run only when workspace is truthy
  });

  useEffect(() => {
    if (!isPending) {
      setIsImmediateLoading(false);
    }
  }, [isPending]);

  useEffect(() => {
    if (error) {
      showNotification({
        type: "error",
        title: "GitHub Integration Error",
        message: (error as Error).message,
      });
    }
  }, [error, showNotification]);

  const initiateInstall = async () => {
    try {
      const response = await fetch("/api/github-app-install");
      const data = await response.json();
      window.open(data.installUrl, "_blank");
    } catch (err) {
      showNotification({
        type: "error",
        title: "GitHub Integration Error",
        message: "Failed to initiate GitHub App installation.",
      });
    }
  };

  return {
    isConnected: installationData?.isConnected ?? false,
    githubOrgName: installationData?.githubOrgName ?? null,
    installationId: installationData?.installationId ?? null,
    isPending: isPending,
    error,
    initiateInstall,
    refetchInstallation,
  };
}

================
File: app/hooks/useVCSToken.tsx
================
"use client";
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase/supabase-client";
import axios from "axios";

const useVCSToken = () => {
  const [providerToken, setProviderToken] = useState<string | null>(null);
  const [providerRefreshToken, setProviderRefreshToken] = useState<
    string | null
  >(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTokens = async () => {
      try {
        const { data, error } = await supabase.auth.getSession();
        if (error) {
          setError(error.message);
          return;
        }

        if (data?.session?.provider_token) {
          setProviderToken(data.session.provider_token);
          // Assuming the provider refresh token is stored in a similar manner
          setProviderRefreshToken(data.session.provider_refresh_token || null);
        } else {
          setError("No GitHub token found");
        }
      } catch (err) {
        setError("Failed to retrieve GitHub tokens");
      } finally {
        setLoading(false);
      }
    };

    fetchTokens();
  }, []);

  const refreshProviderToken = async () => {
    if (!providerRefreshToken) {
      setError("No refresh token available");
      return null;
    }

    try {
      // This is a placeholder. You'll need to implement the actual refresh logic
      // using GitHub's OAuth refresh flow
      const response = await axios.post(
        "https://github.com/login/oauth/access_token",
        {
          refresh_token: providerRefreshToken,
          client_id: process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
          client_secret: process.env.GITHUB_CLIENT_SECRET,
          grant_type: "refresh_token",
        },
        {
          headers: {
            Accept: "application/json",
          },
        }
      );

      const newToken = response.data.access_token;
      setProviderToken(newToken);
      return newToken;
    } catch (err) {
      setError("Failed to refresh GitHub token");
      return null;
    }
  };

  return { providerToken, error, loading, refreshProviderToken };
};

export default useVCSToken;

================
File: app/lib/supabase/supabase-client.ts
================
import { createBrowserClient } from "@supabase/ssr";

export function createClient() {
  // Create a supabase client on the browser with project's credentials
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}

================
File: app/lib/supabase/supabase-server.ts
================
import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { cookies } from "next/headers";

export function createClient() {
  const cookieStore = cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
}

================
File: app/lib/supabase/superbase-middleware.ts
================
import { createServerClient } from "@supabase/ssr";
import { createClient } from "@/lib/supabase/supabase-server";
import { NextResponse, type NextRequest } from "next/server";

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          );
          supabaseResponse = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
    }
  );

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (
    !user &&
    !request.nextUrl.pathname.startsWith("/login") &&
    !request.nextUrl.pathname.startsWith("/signup") &&
    !request.nextUrl.pathname.startsWith("/auth")
  ) {
    // No user, redirect to login
    const url = request.nextUrl.clone();
    url.pathname = "/login";
    return NextResponse.redirect(url);
  } else if (user) {
    const workspaceExists = await doesWorkspaceExist(user.id, supabase);

    if (!workspaceExists && request.nextUrl.pathname !== "/setup") {
      // If no workspace exists and the user is not already on the setup page, redirect to setup
      const url = request.nextUrl.clone();
      url.pathname = "/setup";
      return NextResponse.redirect(url);
    }

    if (workspaceExists && request.nextUrl.pathname === "/setup") {
      // If the user has a workspace and tries to access the setup page, redirect to dashboard
      const url = request.nextUrl.clone();
      url.pathname = "/dashboard/workspaces";
      return NextResponse.redirect(url);
    }
  }

  // Handle redirects for the login page
  if (request.nextUrl.pathname === "/login") {
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (session) {
      const url = request.nextUrl.clone();
      url.pathname = "/dashboard/workspaces";
      return NextResponse.redirect(url);
    }
  }

  // Redirect root to dashboard
  if (request.nextUrl.pathname === "/") {
    const url = request.nextUrl.clone();
    url.pathname = "/dashboard/workspaces";
    return NextResponse.redirect(url);
  }

  // Return the original supabaseResponse
  return supabaseResponse;
}

const doesWorkspaceExist = async (userId, supabaseClient) => {
  // User is logged in, now check for workspaces
  const { data: workspacesData, error } = await supabaseClient
    .from("workspaces")
    .select("name")
    .eq("user_id", userId);

  // If there are no workspaces or an error occurs, return false
  if (!workspacesData || workspacesData.length === 0) {
    return false;
  }

  return true;
};

================
File: app/lib/fontAwesome.ts
================
import { config } from '@fortawesome/fontawesome-svg-core';
import '@fortawesome/fontawesome-svg-core/styles.css';

config.autoAddCss = false;

================
File: app/lib/github.ts
================
import { App } from "octokit";

const githubApp = new App({
  appId: process.env.NEXT_PUBLIC_GITHUB_APP_ID!,
  privateKey: process.env.NEXT_PUBLIC_GITHUB_APP_PRIVATE_KEY!,
});

export { githubApp };

================
File: app/lib/sequelize.ts
================
import pg from 'pg'
const { Client } = pg

type Config = {
    user?: string, // default process.env.PGUSER || process.env.USER
    password?: string, //default process.env.PGPASSWORD
    host?: string, // default process.env.PGHOST
    port?: string, // default process.env.PGPORT
    database?: string, // default process.env.PGDATABASE || user
    connectionString?: string, // e.g. postgres://user:password@host:5432/database
    ssl?: any, // passed directly to node.TLSSocket, supports all tls.connect options
    types?: any, // custom type parsers
    statement_timeout?: number, // number of milliseconds before a statement in query will time out, default is no timeout
    query_timeout?: number, // number of milliseconds before a query call will timeout, default is no timeout
    lock_timeout?: number, // number of milliseconds a query is allowed to be en lock state before it's cancelled due to lock timeout
    application_name?: string, // The name of the application that created this Client instance
    connectionTimeoutMillis?: number, // number of milliseconds to wait for connection, default is no timeout
    idle_in_transaction_session_timeout?: number // number of milliseconds before terminating any session with an open idle transaction, default is no timeout
}


const client = new Client({
  
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT!),
  database: process.env.DB_NAME,
  
 // connectionString: 'postgresql://kendall:0920@localhost:5432/kendall'
});

//

export default client

================
File: app/global-error.tsx
================
"use client";

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
  
  --color-success: #10B981;
  --color-info: #3B82F6;
  --color-warning: #F59E0B;
  --color-error: #EF4444;

}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

html, body, #__next {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.theme-main {
  --color-primary: #161618; /* Darkest background */
  --color-secondary: #383737; /* Container background */
  --color-secondary-border: #5D5D5D;
  --color-tertiary: #309464; /* Button and highlights */
  --color-tertiary-border: #47E197; /* Button and highlights */
  --color-neutral: #2a8060; /* Text */
  --color-accent: #D9D9D9; /* Border and light gray */
  --color-border: #363535; /* Border color */
  --color-alert: #212121;
  --color-dashboard: #1B1B1C;
  --color-sidenav: #A3A3A3;
  --color-skeleton: #2A2A2A;
  --color-shimmer-peak: #4a4a4a;

}
.theme-main2 {
  --color-primary: #141416; /* Darkest background */
  --color-secondary: #2C2B2F; /* Container background with more contrast */
  --color-secondary-border: #494949; /* Subtle contrast on borders */
  --color-tertiary: #3A8D6A; /* Muted green for buttons and highlights */
  --color-tertiary-border: #4FAC85; /* Lighter, subtle green for borders */
  --color-neutral: #E1E1E1; /* Softer white for text */
  --color-accent: #B0B0B0; /* Light gray accents with better contrast */
  --color-border: #2E2D31; /* Border color with more definition */
  --color-alert: #1E1E1E; /* Darker alert background */
  --color-dashboard: #1A1A1B; /* Consistent dark dashboard background */
  --color-sidenav: #8A8A8A; /* Slightly brighter sidebar text */
  --color-skeleton: #2E2D31;
  --color-shimmer-peak: #505050;
}

.theme-modern {
  --color-primary: #1E1E2F;          /* Dark background */
  --color-secondary: #2D2D44;        /* Container background */
  --color-secondary-border: #3B3B5A; /* Subtle border for containers */
  --color-tertiary: #4C8BF5;         /* Blue accent for buttons and highlights */
  --color-tertiary-border: #6FA3FF;  /* Lighter blue for button borders */
  --color-neutral: #E5E5E5;          /* Light gray for primary text */
  --color-accent: #9AA0A6;           /* Muted gray for secondary text */
  --color-border: #3B3B5A;           /* Consistent border color */
  --color-alert: #27273E;            /* Alert background */
  --color-dashboard: #1F1F30;        /* Dashboard background */
  --color-sidenav: #9AA0A6;          /* Sidebar text color */
  --color-skeleton: #2D2D44;         /* Skeleton loader background */
  --color-shimmer-peak: #4A4A6A;     /* Shimmer effect color */
}

.theme-dark {
  --color-primary: #0F0F11; /* Darkest background */
  --color-secondary: #1A1A1D; /* Container background */
  --color-secondary-border: #27272A; /* Subtle border */
  --color-tertiary: #3A8D6A; /* Muted green for buttons and highlights */
  --color-tertiary-border: #4FAC85; /* Lighter, subtle green for borders */
  --color-neutral: #D4D4D8; /* Text, soft off-white for less contrast */
  --color-accent: #71717A; /* Border and light gray */
  --color-border: #27272A; /* Border color */
  --color-alert: #18181B; /* Alert color */
  --color-dashboard: #141417; /* Dashboard background */
  --color-sidenav: #A1A1AA; /* Sidenav text */
  --color-skeleton: #27272A;
  --color-shimmer-peak: #3F3F46;
}

.theme-dark-blue {
  --color-primary: #121212; /* Darkest background */
  --color-secondary: #1E1E24; /* Container background */
  --color-secondary-border: #2D2D34;
  --color-tertiary: #3A506B; /* Button and highlights */
  --color-tertiary-border: #5BC0BE; /* Button and highlights */
  --color-neutral: #E0E1DD; /* Text */
  --color-accent: #6FFFE9; /* Accent color for small highlights */
  --color-border: #2A2A2E; /* Border color */
  --color-alert: #1B1B1E;
  --color-dashboard: #16161A;
  --color-sidenav: #B8B8B8;
  --color-skeleton: #2A2A2E;
  --color-shimmer-peak: #3B3B44;
  
}
.theme-light {
  --color-primary: #FFFFFF; /* Lightest background */
  --color-secondary: #F5F5F7; /* Container background */
  --color-secondary-border: #E0E0E2; /* Subtle border */
  --color-tertiary: #34A853; /* Green button and highlights */
  --color-tertiary-border: #4CAF50; /* Brighter green for button borders and highlights */
  --color-neutral: #1A1A1D; /* Text, dark for contrast */
  --color-accent: #6E6E73; /* Border and medium gray */
  --color-border: #D1D1D6; /* Border color */
  --color-alert: #FEF3C7; /* Light yellow for alerts */
  --color-dashboard: #F9F9FB; /* Dashboard background */
  --color-sidenav: #4A4A4F; /* Sidenav text */
  --color-skeleton: #E0E0E2;
  --color-shimmer-peak: #F0F0F2;
}



/* Define the fadeIn keyframe animation */
@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-4px);
  }
  50% {
    transform: translateX(4px);
  }
  75% {
    transform: translateX(-4px);
  }
}

@keyframes slideIn {
  0% {
    transform: translateY(10px);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.animate-shake {
  animation: shake 0.3s ease-in-out;
}

.animate-slideIn {
  animation: slideIn 0.3s ease-in-out;
}


.loader {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 4px solid white;
  width: 18px;
  height: 18px;
  animation: spin 0.6s linear infinite;
}

.loader-container {
  height: 1.5rem; /* Adjust this to match the text height */
  display: flex;
  align-items: center;
  justify-content: center;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}


@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

.modal-content {
  transition: all 0.3s ease-in-out;
}

.modal-enter {
  opacity: 0;
  transform: scale(0.9);
}

.modal-enter-active {
  opacity: 1;
  transform: scale(1);
}

.modal-exit {
  opacity: 1;
  transform: scale(1);
}

.modal-exit-active {
  opacity: 0;
  transform: scale(0.9);
}




.animate-checkmark {
  animation: checkmark 0.5s ease-in-out;
}

@keyframes checkmark {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  50% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
  }
}


/* WorkspaceCreationModal.css */

/* Common styles for slides */
.workspace-modal {
  position: relative;
}

.slide-right-enter,
.slide-right-exit,
.slide-left-enter,
.slide-left-exit {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

/* Slide Right Animation (for "Continue") */
.slide-right-enter {
  transform: translateX(-100%);
  opacity: 0;
}

.slide-right-enter-active {
  transform: translateX(0%);
  opacity: 1;
  transition: transform 300ms ease-in-out, opacity 300ms ease-in-out;
}

.slide-right-exit {
  transform: translateX(0%);
  opacity: 1;
}

.slide-right-exit-active {
  transform: translateX(100%);
  opacity: 0;
  transition: transform 300ms ease-in-out, opacity 300ms ease-in-out;
}

/* Slide Left Animation (for "Back") */
.slide-left-enter {
  transform: translateX(100%);
  opacity: 0;
}

.slide-left-enter-active {
  transform: translateX(0%);
  opacity: 1;
  transition: transform 300ms ease-in-out, opacity 300ms ease-in-out;
}

.slide-left-exit {
  transform: translateX(0%);
  opacity: 1;
}

.slide-left-exit-active {
  transform: translateX(-100%);
  opacity: 0;
  transition: transform 300ms ease-in-out, opacity 300ms ease-in-out;
}


/* styles/globals.css */

.bg-skeleton {
  background-color: var(--color-skeleton);
}

.bg-shimmer {
  background: linear-gradient(
    90deg,
    transparent,
    var(--color-shimmer-peak),
    transparent
  );
}

.animate-shimmer {
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";

import { Inter } from "next/font/google";

import Providers from "./providers";
import "./globals.css";

import { config } from "@fortawesome/fontawesome-svg-core";
import "@fortawesome/fontawesome-svg-core/styles.css";
config.autoAddCss = false;

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html
      lang="en"
      className="h-full theme-main2
     bg-primary"
    >
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
"use client";
import Image from "next/image";
import sequelize from "./lib/sequelize";

export default async function Home() {
  try {
    console.log("Connection has been established successfully.");
  } catch (error) {
    console.error("Unable to connect to the database:", error);
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">app/page.tsx</code>
        </p>
        <div className="fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none">
          <a
            className="pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0"
            href="https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            By{" "}
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              className="dark:invert"
              width={100}
              height={24}
              priority
            />
          </a>
        </div>
      </div>

      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-full sm:before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full sm:after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
        <Image
          className="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert"
          src="/next.svg"
          alt="Next.js Logo"
          width={180}
          height={37}
          priority
        />
      </div>

      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Docs{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Find in-depth information about Next.js features and API.
          </p>
        </a>

        <a
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Learn{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Learn about Next.js in an interactive course with&nbsp;quizzes!
          </p>
        </a>

        <a
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Templates{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Explore starter templates for Next.js.
          </p>
        </a>

        <a
          href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Deploy{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50 text-balance`}>
            Instantly deploy your Next.js site to a shareable URL with Vercel.
          </p>
        </a>
      </div>
    </main>
  );
}

================
File: app/providers.tsx
================
"use client";
import { QueryClientProvider, QueryClient } from "@tanstack/react-query";
import { WebSocketProvider } from "@/contexts/WebSocketContext";
import { NotificationProvider } from "@/contexts/NotificationContext";

import type * as React from "react";

const queryClient = new QueryClient();
export default function Providers({ children }: { children: React.ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>
      <NotificationProvider>
        <WebSocketProvider>{children}</WebSocketProvider>
      </NotificationProvider>
    </QueryClientProvider>
  );
}

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: Dockerfile
================
# Stage 1: Build the application
FROM node:18-alpine AS builder

# Set the working directory
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json ./
RUN npm install

# Copy the rest of the application
COPY . .

# Build the application
RUN npm run build

# Stage 2: Serve the application
FROM node:18-alpine

# Set the working directory
WORKDIR /app

# Copy built files from the builder stage
COPY --from=builder /app /app

# Install 'serve' to serve the application
RUN npm install -g serve

# Expose port 3000
EXPOSE 3000

# Start the application
CMD ["serve", "-s", "build"]

================
File: GitHub.md
================
### GitHub App Authorization vs Installation: A Quick Guide

**GitHub Apps** can either be **authorized** or **installed**, and knowing the difference is crucial for choosing the right approach.

---

### 1. **GitHub App Authorization**

**Authorization** gives the app access to your **personal account data** and allows it to act on your behalf. This is used when a third-party app needs to verify your identity or interact with GitHub in your name.

#### Key Points:

- **Verify Identity**: The app retrieves your public profile and, if allowed, private data like your email.
- **Access Resources**: The app checks what repositories you can access and interacts accordingly.
- **Act on Your Behalf**: The app can perform tasks like creating issues or commenting, but only within the permissions you and the app share.

#### Use Cases:

- **Single-Sign-On**: Verifying identity via GitHub login.
- **Acting on Behalf**: Posting comments or creating issues under your account.

---

### 2. **GitHub App Installation**

**Installation** grants the app **repository-level access**. You install the app on an organization or specific repositories, specifying which resources the app can interact with.

#### Key Points:

- **Repository/Organization Access**: The app gets read/write access to selected repositories based on the permissions granted.
- **Granular Control**: You decide which repositories the app can access, ensuring precise permissions.

#### Use Cases:

- **Repository Management**: Automating pull requests, CI/CD, syncing code.
- **Organizational Tools**: Enforcing policies or managing workflows within an organization.

---

### The Difference:

- **Authorization**: Tied to your **GitHub account**; lets the app act on your behalf for tasks like commenting or reading profile data.
- **Installation**: Tied to **repositories/organizations**; gives the app access to specific resources for managing repositories and automating workflows.

---

### Conclusion:

For **personal access**, use **authorization**. For **repository-level control and automation**, go with **installation**. You can use both, depending on the app’s needs.

================
File: GUIDE.md
================
- Next.js Server Actions are functions that execute on the server side. Having these special functions that only run on the server means that developers can offload responsibilities like data fetching and mutations to them, avoiding the vulnerabilities and security concerns of fetching and mutating data from the client.

- Server action is just a convenient way to mutate data without having to create an API.

================
File: middleware.ts
================
import { type NextRequest } from "next/server";
import { updateSession } from "@/lib/supabase/superbase-middleware";

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "intra-wms",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.27.3",
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-brands-svg-icons": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@hookform/resolvers": "^3.4.2",
    "@iarna/toml": "^2.2.5",
    "@mui/icons-material": "^6.0.2",
    "@mui/material": "^6.0.2",
    "@octokit/auth-app": "^7.1.1",
    "@octokit/rest": "^21.0.2",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.5.1",
    "@supabase/supabase-js": "^2.45.3",
    "@tanstack/react-query": "^5.56.2",
    "axios": "^1.7.2",
    "bcryptjs": "^2.4.3",
    "date-fns": "^3.6.0",
    "framer-motion": "^11.5.4",
    "fs": "^0.0.1-security",
    "install": "^0.13.0",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.439.0",
    "next": "14.1.4",
    "npm": "^10.8.3",
    "octokit": "^4.0.2",
    "openai": "^4.60.0",
    "pg": "^8.11.5",
    "pg-hstore": "^2.3.4",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.51.5",
    "sequelize": "^6.37.3",
    "simple-git": "^3.26.0",
    "socket.io": "^4.7.5",
    "socket.io-client": "^4.7.5",
    "ws": "^8.18.0",
    "xml2js": "^0.6.2",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/node": "^20",
    "@types/pg": "^8.11.6",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.4",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],

  theme: {
    extend: {
      colors: {
        primary: "var(--color-primary)",
        secondary: "var(--color-secondary)",
        secondaryBorder: "var(--color-secondary-border)",
        tertiary: "var(--color-tertiary)",
        tertiaryBorder: "var(--color-tertiary-border)",

        /* opposite of primary, used for text on primary backgrounds */
        neutral: "var(--color-neutral)",

        /* used to compliment borders that use a primary background */
        accent: "var(--color-accent)",

        border: "var(--color-border)",
        alert: "var(--color-alert)",
        dashboard: "var(--color-dashboard)",
        sidenav: "var(--color-sidenav)",
        success: "var(--color-success)",
        info: "var(--color-info)",
        warning: "var(--color-warning)",
        error: "var(--color-error)",
        skeleton: "var(--color-skeleton)",
        "shimmer-peak": -"var(-color-shimmer-peak)",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: test.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 400">
    <!-- Data Sources -->
    <rect x="10" y="10" width="100" height="100" fill="#ffffff" stroke="#000000"/>
    <text x="60" y="25" text-anchor="middle" font-size="10" font-weight="bold">Data Sources</text>
    <rect x="20" y="35" width="80" height="20" fill="#ffffff" stroke="#000000"/>
    <text x="60" y="49" text-anchor="middle" font-size="9">MEBI</text>
    <rect x="20" y="60" width="80" height="20" fill="#ffffff" stroke="#000000"/>
    <text x="60" y="74" text-anchor="middle" font-size="9">EMEA</text>
    <rect x="20" y="85" width="80" height="20" fill="#ffffff" stroke="#000000"/>
    <text x="60" y="99" text-anchor="middle" font-size="9">CSIS</text>
    
    <!-- Logstash -->
    <rect x="180" y="10" width="320" height="140" fill="#d5f5e3" stroke="#000000"/>
    <text x="340" y="25" text-anchor="middle" font-size="12" font-weight="bold">Logstash</text>
    
    <!-- Input -->
    <rect x="200" y="40" width="80" height="50" fill="#ffffff" stroke="#000000"/>
    <text x="240" y="55" text-anchor="middle" font-size="10" font-weight="bold">Input</text>
    <text x="240" y="70" text-anchor="middle" font-size="8">JDBC Connection</text>
    <text x="240" y="82" text-anchor="middle" font-size="8">SQL Views</text>
    
    <!-- Filter -->
    <rect x="300" y="40" width="80" height="50" fill="#ffffff" stroke="#000000"/>
    <text x="340" y="55" text-anchor="middle" font-size="10" font-weight="bold">Filter</text>
    <text x="340" y="70" text-anchor="middle" font-size="8">Clean Data</text>
    <text x="340" y="82" text-anchor="middle" font-size="8">Base64 Encoding</text>
    
    <!-- Output -->
    <rect x="400" y="40" width="80" height="50" fill="#ffffff" stroke="#000000"/>
    <text x="440" y="55" text-anchor="middle" font-size="10" font-weight="bold">Output</text>
    <text x="440" y="70" text-anchor="middle" font-size="8">Send to</text>
    <text x="440" y="82" text-anchor="middle" font-size="8">Elasticsearch</text>
  
    <!-- Elasticsearch -->
    <ellipse cx="600" cy="120" rx="70" ry="40" fill="#fadbd8" stroke="#000000"/>
    <text x="600" y="115" text-anchor="middle" font-size="12" font-weight="bold">Elasticsearch</text>
    <text x="600" y="130" text-anchor="middle" font-size="10">Indexed Data</text>
  
    <!-- Search & Data Extraction Tool -->
    <rect x="420" y="240" width="240" height="120" fill="#fcf3cf" stroke="#000000"/>
    <text x="540" y="260" text-anchor="middle" font-size="12" font-weight="bold">Search &amp; Data Extraction Tool</text>
    
    <rect x="440" y="280" width="90" height="50" fill="#ffffff" stroke="#000000"/>
    <text x="485" y="310" text-anchor="middle" font-size="10" font-weight="bold">User Interface</text>
    
    <rect x="550" y="280" width="90" height="50" fill="#ffffff" stroke="#000000"/>
    <text x="595" y="300" text-anchor="middle" font-size="10" font-weight="bold">Search Query</text>
    <text x="595" y="315" text-anchor="middle" font-size="10">Processor</text>
  
    <!-- Arrows -->
    <line x1="110" y1="60" x2="180" y2="60" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
    <line x1="280" y1="65" x2="300" y2="65" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
    <line x1="380" y1="65" x2="400" y2="65" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
    <line x1="480" y1="65" x2="530" y2="100" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
    <line x1="595" y1="240" x2="595" y2="160" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
    <line x1="605" y1="160" x2="605" y2="240" stroke="#000000" stroke-width="2" marker-end="url(#arrowhead)"/>
  
    <!-- Arrowhead definition -->
    <defs>
      <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
        <polygon points="0 0, 10 3.5, 0 7" />
      </marker>
    </defs>
    
    <!-- Labels -->
    <text x="145" y="50" text-anchor="middle" font-size="10">Pull Data</text>
    <text x="505" y="50" text-anchor="middle" font-size="10">Index Data</text>
    <text x="615" y="200" text-anchor="middle" font-size="10">Search Request</text>
    <text x="585" y="200" text-anchor="middle" font-size="10">Return Results</text>
  </svg>

================
File: test.readme
================
// pages are server compoenents by default but can be set to client compoenents
// https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts
// https://nextjs.org/docs/app/building-your-application/rendering/client-components


//https://www.reddit.com/r/nextjs/comments/17igm1a/comment/ky5pi7f/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button


//https://www.reddit.com/r/nextjs/comments/17igm1a/comment/kcrysjt/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "experimentalDecorators": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./app/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
